<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>tcp on jdxj</title><link>https://jdxj.github.io/tags/tcp/</link><description>Recent content in tcp on jdxj</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 02 Apr 2023 17:44:43 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/tags/tcp/index.xml" rel="self" type="application/rss+xml"/><item><title>连接状态转换</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</link><pubDate>Sun, 02 Apr 2023 17:44:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</guid><description>三次握手的状态变化 同时打开的状态变化 自连接的状态变化 其实就是同时打开, 步骤5, 6在原文当中是window update包, 所以seq=1了. 四</description></item><item><title>MSS</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</link><pubDate>Sun, 02 Apr 2023 12:09:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</guid><description>MSS TCP 为了避免被发送方分片，会主动把数据分割成小段再交给网络层，最大的分段大小称之为 MSS（Max Segment Size）。 MSS = MTU - IP header头大小 -</description></item><item><title>MTU</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</link><pubDate>Sun, 02 Apr 2023 11:38:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</guid><description>MTU 数据链路层传输的帧大小是有限制的，不能把一个太大的包直接塞给链路层，这个限制被称为「最大传输单元（Maximum Transmission Unit, MTU）」 MTU是指整</description></item><item><title>TCP Options</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</link><pubDate>Sat, 01 Apr 2023 21:16:50 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</guid><description>可选项格式</description></item><item><title>TCP窗口大小</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</link><pubDate>Sat, 01 Apr 2023 21:10:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</guid><description>window size只有16位, 起初表示最大窗口为65535B 后来不够用就引入了TCP窗口缩放选项, 范围为0~14 0: 不缩放 !=0: 窗口大小为 windowSize * 2^n 窗口缩放在</description></item><item><title>TCP Flags</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</link><pubDate>Sat, 01 Apr 2023 21:07:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</guid><description>这些标记可以组合使用，比如 SYN+ACK，FIN+ACK 等 SYN（Synchronize）：用于发起连接数据包同步双方的初始序列号 ACK（A</description></item><item><title>TCP序列号/确认号</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</link><pubDate>Sat, 01 Apr 2023 18:23:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</guid><description>序列号 Sequence Number 序列号指的是本报文段第一个字节的序列号 32位无符号整数 初始序列号 在建立连接之初，通信双方都会各自选择一个序列号，称之为初始序列号。</description></item><item><title>TCP头部格式</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%A4%B4%E9%83%A8%E6%A0%BC%E5%BC%8F/</link><pubDate>Sat, 01 Apr 2023 18:21:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%A4%B4%E9%83%A8%E6%A0%BC%E5%BC%8F/</guid><description>不变部分为20B</description></item><item><title>TCP的特点</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</link><pubDate>Sat, 01 Apr 2023 17:39:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</guid><description>面向连接 可靠 校验和 序列号解决乱序, 重复 超时重传 流量控制, 拥塞控制 基于字节流 全双工</description></item><item><title>Socket是并发安全的吗</title><link>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</link><pubDate>Fri, 17 Feb 2023 14:51:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</guid><description>多线程并发读/写同一个TCP socket是线程安全的，因为TCP socket的读/写操作都上锁了。虽然线程安全，但依然不建议你这么做，因为T</description></item></channel></rss>