<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DDD on jdxj</title><link>https://jdxj.github.io/tags/ddd/</link><description>Recent content in DDD on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 20 Jun 2023 14:07:30 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/tags/ddd/index.xml" rel="self" type="application/rss+xml"/><item><title>DDD中聚合、聚合根的含义以及作用</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E8%81%9A%E5%90%88/</link><pubDate>Tue, 20 Jun 2023 14:07:30 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E8%81%9A%E5%90%88/</guid><description>原文 聚合 让实体和值对象协同工作的组织就是聚合, 它用来确保这些领域对象在实现共同的业务逻辑时，能保证数据的一致性。 聚合根 如果把聚合比作组织，那</description></item><item><title>DDD中实体与值对象是干什么的</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E5%AE%9E%E4%BD%93%E4%B8%8E%E5%80%BC%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</link><pubDate>Tue, 20 Jun 2023 13:25:51 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E5%AE%9E%E4%BD%93%E4%B8%8E%E5%80%BC%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</guid><description>原文 实体 实体拥有唯一标识符, 且标识符在经历过各种状态变更后仍能保持一致。对这些对象而言, 重要的不是其属性，而是其延续性和标识，对象的延续性和</description></item><item><title>DDD中限界上下文与通用语言的作用</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BD%9C%E7%94%A8/</link><pubDate>Tue, 20 Jun 2023 12:32:49 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BD%9C%E7%94%A8/</guid><description>原文 通用语言确定了项目团队内部交流的统一语言，而这个语言所在的语义环境则是由限界上下文来限定的，以确保语义的唯一性。而领域专家、架构师和开发</description></item><item><title>DDD划分领域、子域、核心域、支撑域的目的</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E5%88%92%E5%88%86%E9%A2%86%E5%9F%9F/</link><pubDate>Tue, 20 Jun 2023 12:10:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E5%88%92%E5%88%86%E9%A2%86%E5%9F%9F/</guid><description>原文 核心域、支撑域和通用域的主要目标是：通过领域划分，区分不同子域在公司内的不同功能属性和重要性，从而公司可对不同子域采取不同的资源投入和建</description></item><item><title>DDD兴起的原因以及与微服务的关系</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</link><pubDate>Thu, 16 Feb 2023 14:59:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</guid><description>DDD 是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。 原文</description></item></channel></rss>