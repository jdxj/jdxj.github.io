<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>x86 on jdxj</title><link>https://jdxj.github.io/tags/x86/</link><description>Recent content in x86 on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 24 Aug 2023 00:01:58 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/tags/x86/index.xml" rel="self" type="application/rss+xml"/><item><title>通用寄存器的扩展</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E6%89%A9%E5%B1%95/</link><pubDate>Thu, 24 Aug 2023 00:01:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E6%89%A9%E5%B1%95/</guid><description>在64位处理器上，这些寄存器再次被扩展，达到了64位，即RAX、RBX、RCX、RDX、RSI、RDI、RBP、RSP和RIP。同时，它们的</description></item><item><title>nasm标号</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/nasm%E6%A0%87%E5%8F%B7/</link><pubDate>Wed, 23 Aug 2023 15:59:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/nasm%E6%A0%87%E5%8F%B7/</guid><description>1 infi: jmp near infi 标号可以由字母、数字、_、$、#、@、~、.、?组成，但必须以字母、. _和?中的任意一个打头。</description></item><item><title>字符模式</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E5%AD%97%E7%AC%A6%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 23 Aug 2023 13:16:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E5%AD%97%E7%AC%A6%E6%A8%A1%E5%BC%8F/</guid><description>K是闪烁位，为0时不闪烁，为1时闪烁；I是亮度位，为0时正常亮度，为1时呈高亮。</description></item><item><title>8086引导过程</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E5%BC%95%E5%AF%BC%E8%BF%87%E7%A8%8B/</link><pubDate>Tue, 22 Aug 2023 16:22:39 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E5%BC%95%E5%AF%BC%E8%BF%87%E7%A8%8B/</guid><description>8086地址空间为1MB, ROM占内存空间顶端64KB(0xF0000~0xFFFFF), DRAM占内存空间低640KB(0x00000~0</description></item><item><title>8086的内存分段机制</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 21 Aug 2023 12:54:01 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6/</guid><description>分段机制能解决程序重定位问题. 在进行数据传送或者算术逻辑运算的时候，使用算术逻辑部件(ALU)。比如，将AX的内容和CX的内容相加，结果仍在</description></item></channel></rss>