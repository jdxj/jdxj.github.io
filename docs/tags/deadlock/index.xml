<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>deadlock on jdxj</title><link>https://jdxj.github.io/tags/deadlock/</link><description>Recent content in deadlock on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 15 Oct 2023 16:43:43 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/tags/deadlock/index.xml" rel="self" type="application/rss+xml"/><item><title>死锁检测</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</link><pubDate>Sun, 15 Oct 2023 16:43:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( &amp;#34;time&amp;#34; &amp;#34;github.com/sasha-s/go-deadlock&amp;#34; ) func main() { dl() } func dl() { m1 := &amp;amp;deadlock.Mutex{} m2 := &amp;amp;deadlock.Mutex{} go func() { lock(m2, m1) }() lock(m1, m2) } func lock(m1, m2 *deadlock.Mutex) { m1.Lock() time.Sleep(time.Second)</description></item><item><title>pprof</title><link>https://jdxj.github.io/posts/articles/jdxj/go/pprof/</link><pubDate>Sat, 14 Oct 2023 13:33:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/pprof/</guid><description>介绍 排查内存泄漏的示例 goroutine泄漏的示例 CPU占用情况的示例 Profiling Go Programs pprof go pprof 性能分析 golang pprof 实战 实战Go内存泄露 golang 死锁检测 一些命令 1 2 3 4</description></item><item><title>Introducing the Go Race Detector</title><link>https://jdxj.github.io/posts/articles/go/go-race-detector/</link><pubDate>Wed, 19 Apr 2023 16:08:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/go/go-race-detector/</guid><description>原文 1 $ go run -race main.go</description></item></channel></rss>