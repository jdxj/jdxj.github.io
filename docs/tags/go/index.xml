<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>go on jdxj</title><link>https://jdxj.github.io/tags/go/</link><description>Recent content in go on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 22 Jun 2023 14:10:38 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>随机数生成</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</link><pubDate>Thu, 22 Jun 2023 14:10:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</guid><description>Go密码学包crypto/rand提供了密码学级别的随机数生成器实现rand.Reader，在不同平台上rand.Reader使用的数据源有</description></item><item><title>数字签名</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</link><pubDate>Thu, 22 Jun 2023 13:55:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</guid><description>消息认证码虽然解决了消息发送者的身份认证问题，但由于采用消息认证码的通信双方共享密钥，因此对于一条通过了MAC验证的消息，通信双方依旧无法向</description></item><item><title>消息认证码</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</link><pubDate>Thu, 22 Jun 2023 13:45:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</guid><description>单向散列函数虽然能辨别出数据是否被篡改，但却无法辨别出数据是不是伪装的。因此，在这样的场合下，我们还需要对消息进行认证（Authentica</description></item><item><title>单向散列函数</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 22 Jun 2023 13:37:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</guid><description>除了输出长度固定、计算快速之外，密码学级别的单向散列函数还具有如下性质 强抗碰撞性：要找到散列值（摘要值）相同的两条不同的消息是非常困难的。 单</description></item><item><title>公钥密码</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</link><pubDate>Thu, 22 Jun 2023 12:49:30 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</guid><description>常见的密钥配送方案有事先共享密钥（事先以安全的方式将密钥交给通信方）、密钥分配中心（每个通信方要事先与密钥分配中心共享密钥）、Diffie-</description></item><item><title>分组密码算法</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 22 Jun 2023 01:07:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</guid><description>密码算法可以分为分组密码（block cipher）和流密码（stream cipher）两种。 分组密码是一种一次仅能处理固定长度数据块的算法。</description></item><item><title>Go密码学包</title><link>https://jdxj.github.io/posts/articles/jdxj/go/go%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8C%85/</link><pubDate>Thu, 22 Jun 2023 00:46:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/go%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8C%85/</guid><description>官方crypto包 src/crypto golang.org/x/crypto 分类 分组密码 cipher 五种分组模式 ECB CBC CFB OFB CTR des 对称密码 DES TDEA aes 对称密码 AES 公钥密码 tls TLS 1.2 TLS 1.3 x509 编码格式的密钥和证书的解析 rsa RSA elliptic 标准</description></item><item><title>Gotchas in the Go Network Packages Defaults</title><link>https://jdxj.github.io/posts/articles/baillie/gotchas-in-the-go-network-packages-defaults/</link><pubDate>Mon, 19 Jun 2023 14:10:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/baillie/gotchas-in-the-go-network-packages-defaults/</guid><description>原文 Timeouts Client timeouts 1 2 3 4 5 6 7 8 9 10 c := &amp;amp;http.Client{ Timeout: 5 * time.Second, Transport: &amp;amp;http.Transport{ DialContext: (&amp;amp;net.Dialer{ // This is the TCP connect timeout in this instance. Timeout: 2500 * time.Millisecond, }).DialContext, TLSHandshakeTimeout: 2500 * time.Millisecond, }, } Server timeouts 1 2 3 4 s := &amp;amp;http.Server{ ReadTimeout: 2500 * time.Millisecond, WriteTimeout: 5 * time.Second, } HTTP Response Bodies 1 2</description></item><item><title>Encrypting Data With SSH Keys and Golang</title><link>https://jdxj.github.io/posts/articles/earthly/encrypting-data-with-ssh-keys-and-golang/</link><pubDate>Mon, 19 Jun 2023 13:38:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/earthly/encrypting-data-with-ssh-keys-and-golang/</guid><description>原文</description></item><item><title>Don't defer Close() on writable files</title><link>https://jdxj.github.io/posts/articles/joeshaw/dont-defer-close-on-writable-files/</link><pubDate>Mon, 19 Jun 2023 13:11:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/joeshaw/dont-defer-close-on-writable-files/</guid><description>原文 Write()为了性能使用异步方式, 操作系统同步数据到磁盘的一个时机在Close(), 如果不捕获可能造成数据丢失. 安全的Close 1 2 3</description></item><item><title>使用随机端口</title><link>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</link><pubDate>Wed, 14 Jun 2023 12:07:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</guid><description>原文 listen的地址填:0</description></item><item><title>Go 1.18 泛型全面讲解：一篇讲清泛型的全部</title><link>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</link><pubDate>Sun, 04 Jun 2023 15:54:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</guid><description>原文</description></item><item><title>Introducing the Go Race Detector</title><link>https://jdxj.github.io/posts/articles/go/go-race-detector/</link><pubDate>Wed, 19 Apr 2023 16:08:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/go/go-race-detector/</guid><description>原文</description></item><item><title>Go语言高性能编程手册</title><link>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</link><pubDate>Mon, 17 Apr 2023 14:54:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</guid><description>原文 少使用反射 优先使用 strconv 而不是 fmt 少量的重复不比反射差 慎用 binary.Read 和 binary.Write 避免重复的字符串到字节切片的转换 指定容器容量 行内拼接字符串推荐使用运算符+ 非行</description></item><item><title>The Best Golang Blogs</title><link>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</link><pubDate>Tue, 21 Feb 2023 14:47:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</guid><description>原文</description></item><item><title>Plan9 Assembly</title><link>https://jdxj.github.io/posts/articles/cch123/plan9/</link><pubDate>Tue, 21 Feb 2023 14:36:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cch123/plan9/</guid><description>原文</description></item><item><title>Go1.18快讯 新的IP包</title><link>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</link><pubDate>Fri, 23 Dec 2022 18:03:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</guid><description>原文</description></item><item><title>聊一个 string 和 []byte 转换问题</title><link>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 20 Dec 2022 14:18:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</guid><description>错误的使用uintptr转换结果可能被 GC. 原文</description></item><item><title>Designing Go Libraries</title><link>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</link><pubDate>Tue, 20 Dec 2022 10:17:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</guid><description>原文 1. Primary Concerns 1.1. Usability 建立惯例使库的特性可发现 潜在的错误使用 易于完成常见任务 Case Study: net/http 看起来有些繁琐 1 2 3 4 5 6 7 8 9 10 // import &amp;#34;net/http&amp;#34; req, err := http.NewRequest(http.MethodGet, &amp;#34;http://example.com&amp;#34;, nil /* body */) if err != nil</description></item></channel></rss>