<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>go on jdxj</title><link>https://jdxj.github.io/tags/go/</link><description>Recent content in go on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 17 Nov 2023 16:16:11 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>用Go 请求接口不执行body.Close()会内存溢出吗？这次告诉你真相！</title><link>https://jdxj.github.io/posts/articles/weixin/go-http/</link><pubDate>Fri, 17 Nov 2023 16:16:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go-http/</guid><description>原文 既不执行 ioutil.ReadAll(resp.Body) 也不执行resp.Body.Close()，并且不设置http.Client内timeout的时候，就会导致协程泄露。 SetD</description></item><item><title>Go测试编译为二进制执行</title><link>https://jdxj.github.io/posts/articles/jdxj/go/go%E6%B5%8B%E8%AF%95%E7%BC%96%E8%AF%91%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%A7%E8%A1%8C/</link><pubDate>Wed, 15 Nov 2023 15:47:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/go%E6%B5%8B%E8%AF%95%E7%BC%96%E8%AF%91%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%A7%E8%A1%8C/</guid><description>原文 1 2 $ go test -c pkgName $ ./pkgName.test -test.run &amp;#34;TestXxx$&amp;#34; -test.v</description></item><item><title>踩坑记：Go服务灵异panic</title><link>https://jdxj.github.io/posts/articles/weixin/go-string-panic/</link><pubDate>Thu, 02 Nov 2023 14:10:24 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go-string-panic/</guid><description>原文 并发读写 string 会出错.</description></item><item><title>源码分析golang http shutdown优雅退出的原理</title><link>https://jdxj.github.io/posts/articles/xiaorui/go-http-shutdown/</link><pubDate>Thu, 02 Nov 2023 11:13:28 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/xiaorui/go-http-shutdown/</guid><description>原文</description></item><item><title>论golang Timer Reset方法使用的正确姿势</title><link>https://jdxj.github.io/posts/articles/tonybai/go_timer/</link><pubDate>Tue, 31 Oct 2023 17:36:01 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/tonybai/go_timer/</guid><description>原文</description></item><item><title>Go Timer 详解以及 Reset 和 Stop 的正确用法</title><link>https://jdxj.github.io/posts/articles/zhihu/go_timer/</link><pubDate>Fri, 20 Oct 2023 17:16:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/zhihu/go_timer/</guid><description>原文</description></item><item><title>Go_trace</title><link>https://jdxj.github.io/posts/articles/weixin/go_trace/</link><pubDate>Fri, 20 Oct 2023 16:48:59 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go_trace/</guid><description>原文</description></item><item><title>Go 大杀器之跟踪剖析 trace</title><link>https://jdxj.github.io/posts/articles/eddycjy/trace/</link><pubDate>Fri, 20 Oct 2023 16:35:36 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/eddycjy/trace/</guid><description>原文</description></item><item><title>死锁检测</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</link><pubDate>Sun, 15 Oct 2023 16:43:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( &amp;#34;time&amp;#34; &amp;#34;github.com/sasha-s/go-deadlock&amp;#34; ) func main() { dl() } func dl() { m1 := &amp;amp;deadlock.Mutex{} m2 := &amp;amp;deadlock.Mutex{} go func() { lock(m2, m1) }() lock(m1, m2) } func lock(m1, m2 *deadlock.Mutex) { m1.Lock() time.Sleep(time.Second)</description></item><item><title>pprof</title><link>https://jdxj.github.io/posts/articles/jdxj/go/pprof/</link><pubDate>Sat, 14 Oct 2023 13:33:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/pprof/</guid><description>介绍 排查内存泄漏的示例 goroutine泄漏的示例 CPU占用情况的示例 Profiling Go Programs pprof go pprof 性能分析 golang pprof 实战 实战Go内存泄露 golang 死锁检测 一些命令 1 2 3 4</description></item><item><title>Go String</title><link>https://jdxj.github.io/posts/articles/jdxj/go/string/</link><pubDate>Tue, 01 Aug 2023 10:28:51 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/string/</guid><description>String的特点 string类型的数据是不可变的 一旦声明了一个string类型的标识符，无论是常量还是变量，该标识符所指代的数据在整个程序</description></item><item><title>[译]Go正则表达式示例</title><link>https://jdxj.github.io/posts/articles/colobu/regexp/</link><pubDate>Sun, 16 Jul 2023 12:48:00 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/colobu/regexp/</guid><description>原文</description></item><item><title>用Go转换字符编码</title><link>https://jdxj.github.io/posts/articles/jdxj/%E7%94%A8go%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</link><pubDate>Tue, 11 Jul 2023 11:02:46 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E7%94%A8go%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</guid><description>计算机字符集中的每个字符都有两个属性：码点（code point）和表示这个码点的内存编码（位模式，表示这个字符码点的二进制比特串）。 所谓码点</description></item><item><title>delve</title><link>https://jdxj.github.io/posts/articles/jdxj/delve/</link><pubDate>Mon, 10 Jul 2023 15:02:21 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/delve/</guid><description>安装 1 $ go install github.com/go-delve/delve/cmd/dlv@latest 使用 测试代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/jdxj/delve/pkg/foo&amp;#34; ) func main() { a := 3 b := 10 c := foo.Foo(a, b) fmt.Println(c) } 1 2 3 4 5 6 7 8 9 package foo func Foo(step, count int) int { sum := 0 for</description></item><item><title>Go 大杀器之性能剖析 PProf（上）</title><link>https://jdxj.github.io/posts/articles/eddycjy/pprof/</link><pubDate>Tue, 27 Jun 2023 20:29:54 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/eddycjy/pprof/</guid><description>原文</description></item><item><title>profile</title><link>https://jdxj.github.io/posts/articles/pkg/profile/</link><pubDate>Tue, 27 Jun 2023 19:58:29 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/pkg/profile/</guid><description>Simple profiling support package for Go</description></item><item><title>Golang中的热重启</title><link>https://jdxj.github.io/posts/articles/weixin/golang%E4%B8%AD%E7%9A%84%E7%83%AD%E9%87%8D%E5%90%AF/</link><pubDate>Sun, 25 Jun 2023 21:35:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/golang%E4%B8%AD%E7%9A%84%E7%83%AD%E9%87%8D%E5%90%AF/</guid><description>原文 热重启的原理 监听重启信号； 收到重启信号时fork子进程，同时需要将服务监听的socket文件描述符传递给子进程； 子进程接收并监听父进程传</description></item><item><title>在 golang 中是如何对 epoll 进行封装的？</title><link>https://jdxj.github.io/posts/articles/weixin/go%E5%B0%81%E8%A3%85epoll/</link><pubDate>Sun, 25 Jun 2023 20:41:59 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go%E5%B0%81%E8%A3%85epoll/</guid><description>原文 简单来说就是封装非阻塞fd, 用户代码在调用非阻塞fd时, 由go来实现调度, 将本goroutine阻塞, 但是不阻塞该线程.</description></item><item><title>Golang本地缓存选型对比及原理总结</title><link>https://jdxj.github.io/posts/articles/weixin/golang%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 25 Jun 2023 20:09:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/golang%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid><description>原文 比较的库 freecache bigcache fastcache offheap groupcache ristretto go-cache 实现零GC的方案 无GC：分配堆外内存(Mmap) 避免GC：map非指针优化(map[uint64]uint32)或</description></item><item><title>随机数生成</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</link><pubDate>Thu, 22 Jun 2023 14:10:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</guid><description>Go密码学包crypto/rand提供了密码学级别的随机数生成器实现rand.Reader，在不同平台上rand.Reader使用的数据源有</description></item><item><title>数字签名</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</link><pubDate>Thu, 22 Jun 2023 13:55:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</guid><description>消息认证码虽然解决了消息发送者的身份认证问题，但由于采用消息认证码的通信双方共享密钥，因此对于一条通过了MAC验证的消息，通信双方依旧无法向</description></item><item><title>消息认证码</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</link><pubDate>Thu, 22 Jun 2023 13:45:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</guid><description>单向散列函数虽然能辨别出数据是否被篡改，但却无法辨别出数据是不是伪装的。因此，在这样的场合下，我们还需要对消息进行认证（Authentica</description></item><item><title>单向散列函数</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 22 Jun 2023 13:37:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</guid><description>除了输出长度固定、计算快速之外，密码学级别的单向散列函数还具有如下性质 强抗碰撞性：要找到散列值（摘要值）相同的两条不同的消息是非常困难的。 单</description></item><item><title>公钥密码</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</link><pubDate>Thu, 22 Jun 2023 12:49:30 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</guid><description>常见的密钥配送方案有事先共享密钥（事先以安全的方式将密钥交给通信方）、密钥分配中心（每个通信方要事先与密钥分配中心共享密钥）、Diffie-</description></item><item><title>分组密码算法</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 22 Jun 2023 01:07:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</guid><description>密码算法可以分为分组密码（block cipher）和流密码（stream cipher）两种。 分组密码是一种一次仅能处理固定长度数据块的算法。</description></item><item><title>Go密码学包</title><link>https://jdxj.github.io/posts/articles/jdxj/go/go%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8C%85/</link><pubDate>Thu, 22 Jun 2023 00:46:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/go%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8C%85/</guid><description>官方crypto包 src/crypto golang.org/x/crypto 分类 分组密码 cipher 五种分组模式 ECB CBC CFB OFB CTR des 对称密码 DES TDEA aes 对称密码 AES 公钥密码 tls TLS 1.2 TLS 1.3 x509 编码格式的密钥和证书的解析 rsa RSA elliptic 标准</description></item><item><title>Gotchas in the Go Network Packages Defaults</title><link>https://jdxj.github.io/posts/articles/baillie/gotchas-in-the-go-network-packages-defaults/</link><pubDate>Mon, 19 Jun 2023 14:10:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/baillie/gotchas-in-the-go-network-packages-defaults/</guid><description>原文 Timeouts Client timeouts 1 2 3 4 5 6 7 8 9 10 c := &amp;amp;http.Client{ Timeout: 5 * time.Second, Transport: &amp;amp;http.Transport{ DialContext: (&amp;amp;net.Dialer{ // This is the TCP connect timeout in this instance. Timeout: 2500 * time.Millisecond, }).DialContext, TLSHandshakeTimeout: 2500 * time.Millisecond, }, } Server timeouts 1 2 3 4 s := &amp;amp;http.Server{ ReadTimeout: 2500 * time.Millisecond, WriteTimeout: 5 * time.Second, } HTTP Response Bodies 1 2</description></item><item><title>Encrypting Data With SSH Keys and Golang</title><link>https://jdxj.github.io/posts/articles/earthly/encrypting-data-with-ssh-keys-and-golang/</link><pubDate>Mon, 19 Jun 2023 13:38:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/earthly/encrypting-data-with-ssh-keys-and-golang/</guid><description>原文</description></item><item><title>Don't defer Close() on writable files</title><link>https://jdxj.github.io/posts/articles/joeshaw/dont-defer-close-on-writable-files/</link><pubDate>Mon, 19 Jun 2023 13:11:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/joeshaw/dont-defer-close-on-writable-files/</guid><description>原文 Write()为了性能使用异步方式, 操作系统同步数据到磁盘的一个时机在Close(), 如果不捕获可能造成数据丢失. 安全的Close 1 2 3</description></item><item><title>使用随机端口</title><link>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</link><pubDate>Wed, 14 Jun 2023 12:07:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</guid><description>原文 listen的地址填:0</description></item><item><title>Go 1.18 泛型全面讲解：一篇讲清泛型的全部</title><link>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</link><pubDate>Sun, 04 Jun 2023 15:54:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</guid><description>原文</description></item><item><title>Introducing the Go Race Detector</title><link>https://jdxj.github.io/posts/articles/go/go-race-detector/</link><pubDate>Wed, 19 Apr 2023 16:08:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/go/go-race-detector/</guid><description>原文 1 $ go run -race main.go</description></item><item><title>Go语言高性能编程手册</title><link>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</link><pubDate>Mon, 17 Apr 2023 14:54:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</guid><description>原文 少使用反射 优先使用 strconv 而不是 fmt 少量的重复不比反射差 慎用 binary.Read 和 binary.Write 避免重复的字符串到字节切片的转换 指定容器容量 行内拼接字符串推荐使用运算符+ 非行</description></item><item><title>The Best Golang Blogs</title><link>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</link><pubDate>Tue, 21 Feb 2023 14:47:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</guid><description>原文</description></item><item><title>Plan9 Assembly</title><link>https://jdxj.github.io/posts/articles/cch123/plan9/</link><pubDate>Tue, 21 Feb 2023 14:36:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cch123/plan9/</guid><description>原文</description></item><item><title>Go1.18快讯 新的IP包</title><link>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</link><pubDate>Fri, 23 Dec 2022 18:03:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</guid><description>原文</description></item><item><title>聊一个 string 和 []byte 转换问题</title><link>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 20 Dec 2022 14:18:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</guid><description>错误的使用uintptr转换结果可能被 GC. 原文</description></item><item><title>Designing Go Libraries</title><link>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</link><pubDate>Tue, 20 Dec 2022 10:17:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</guid><description>原文 1. Primary Concerns 1.1. Usability 建立惯例使库的特性可发现 潜在的错误使用 易于完成常见任务 Case Study: net/http 看起来有些繁琐 1 2 3 4 5 6 7 8 9 10 // import &amp;#34;net/http&amp;#34; req, err := http.NewRequest(http.MethodGet, &amp;#34;http://example.com&amp;#34;, nil /* body */) if err != nil</description></item></channel></rss>