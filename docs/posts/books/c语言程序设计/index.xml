<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>C语言程序设计: 现代方法 on jdxj</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link><description>Recent content in C语言程序设计: 现代方法 on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 30 Jun 2023 16:18:42 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>第14章 预处理器</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC14%E7%AB%A0-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link><pubDate>Thu, 06 Jul 2023 12:39:47 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC14%E7%AB%A0-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid><description>14.1 预处理器的工作原理 #define指令定义了一个宏——用来代表其他东西的一个名字. 当这个宏在后面的程序中使用到时，预处理器“扩展”宏，将宏替</description></item><item><title>第13章 字符串</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC13%E7%AB%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Wed, 05 Jul 2023 14:56:43 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC13%E7%AB%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>13.1 字符串字面量 字符串字面量（string literal）是用一对双引号括起来的字符序列： 1 &amp;#34;When you come to a fork in the road, take it.&amp;#34; 13.1.1 字符串字面量中的转义序列 1</description></item><item><title>第12章 指针和数组</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC12%E7%AB%A0-%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84/</link><pubDate>Wed, 05 Jul 2023 12:52:28 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC12%E7%AB%A0-%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84/</guid><description>12.1 指针的算术运算 1 2 3 int a[10], *p; p = &amp;amp;a[0]; *p = 5; C语言支持3种格式的指针算术运算 指针加上整数； 指针减去整数； 两个指针相减。 12.1.1 指针加上整数 1 2 3 4 int a[10],</description></item><item><title>第11章 指针</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC11%E7%AB%A0-%E6%8C%87%E9%92%88/</link><pubDate>Wed, 05 Jul 2023 11:59:48 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC11%E7%AB%A0-%E6%8C%87%E9%92%88/</guid><description>11.1 指针变量 程序中的每个变量占有一个或多个字节内存，把第一个字节的地址称为是变量的地址。 指针变量的声明 1 2 int *p; int i, j, a[10], b[20], *p, *q; C语言要求每个指针</description></item><item><title>第10章 程序结构</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC10%E7%AB%A0-%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</link><pubDate>Wed, 05 Jul 2023 10:41:38 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC10%E7%AB%A0-%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</guid><description>10.1 局部变量 把在函数体内声明的变量称为该函数的局部变量。 局部变量具有下列性质 自动存储期限 块作用域, 从变量声明的点开始一直到所在函数体的末尾 C9</description></item><item><title>第9章 函数</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC9%E7%AB%A0-%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 04 Jul 2023 14:14:09 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC9%E7%AB%A0-%E5%87%BD%E6%95%B0/</guid><description>9.1 函数的定义和调用 1 2 3 4 double average(double a, double b) { return (a + b) / 2; } void是一种没有值的类型 1 2 3 4 void print_count(int n) { printf(&amp;#34;T minus %d and counting\n&amp;#34;, n); } 无参函数 1 2 3 4 void print_pun(void) { printf(&amp;#34;To C, or not to</description></item><item><title>第8章 数组</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC8%E7%AB%A0-%E6%95%B0%E7%BB%84/</link><pubDate>Tue, 04 Jul 2023 11:30:18 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC8%E7%AB%A0-%E6%95%B0%E7%BB%84/</guid><description>8.1 一维数组 1 int a[10]; 因为程序以后改变时可能需要调整数组的长度，所以较好的方法是用宏来定义数组的长度： 1 2 3 #define N 10 ... int a[N]; 8.1.1 数组下标 1 2 3 4 for (i = 0;</description></item><item><title>第7章 基本类型</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC7%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 01 Jul 2023 16:07:44 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC7%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</guid><description>7.1 整数类型 实际上只有下列6种组合可以产生不同的类型 说明符的顺序没什么影响 1 2 3 4 5 6 short int unsigned short int int unsigned int long int unsigned long int C语言允许通过省略单词int来</description></item><item><title>第6章 循环</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC6%E7%AB%A0-%E5%BE%AA%E7%8E%AF/</link><pubDate>Sat, 01 Jul 2023 14:37:08 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC6%E7%AB%A0-%E5%BE%AA%E7%8E%AF/</guid><description>6.1 while语句 while (表达式) 语句 圆括号是强制要求的 1 2 3 4 while (i &amp;gt; 0) { printf(&amp;#34;T minus %d and counting\n&amp;#34;, i); i--; } 无限循环 while (1)&amp;hellip; 6.2 do语句 do 语句 while (表达式); 控制表达式的外</description></item><item><title>第5章 选择语句</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC5%E7%AB%A0-%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/</link><pubDate>Sat, 01 Jul 2023 12:01:33 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC5%E7%AB%A0-%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/</guid><description>5.1 逻辑表达式 在C语言中，诸如i &amp;lt; j这样的比较运算会产生整数：0（假）或1（真）。 5.1.1 关系运算符 关系运算符可以用于比较整数和浮点数，也允许比较混</description></item><item><title>第4章 表达式</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC4%E7%AB%A0-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Sat, 01 Jul 2023 10:38:15 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC4%E7%AB%A0-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>4.1 算术运算符 表4-1 算术运算符 当把int型操作数和float型操作数混合在一起时，运算结果是float型的。 运算符%要求操作数是整数。如果两</description></item><item><title>第3章 格式化输入/输出</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC3%E7%AB%A0-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA/</link><pubDate>Sat, 01 Jul 2023 09:09:35 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC3%E7%AB%A0-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA/</guid><description>3.1 printf函数 1 printf(格式串, 表达式1, 表达式2, ...); 调用printf函数一次可以打印的值的个数没有限制。 C语言编译器不会检测格式</description></item><item><title>第2章 C语言基本概念</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC2%E7%AB%A0-c%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Fri, 30 Jun 2023 16:27:01 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC2%E7%AB%A0-c%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>2.1 编写一个简单的C程序 1 2 3 4 5 6 #include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;#34;To C, or not to C: that is the question.\n&amp;#34;); return 0; } 2.1.1 编译和链接 对于C程序来说, 把程序转化为机器可以执行的形式通常包含下列</description></item><item><title>第1章 C语言概述</title><link>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC1%E7%AB%A0-c%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</link><pubDate>Fri, 30 Jun 2023 16:20:08 +0800</pubDate><guid>https://jdxj.github.io/posts/books/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AC%AC1%E7%AB%A0-c%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</guid><description>1.1 C语言的历史 1.1.1 起源 Unix一开始是用汇编写的 C语言基于B语言 1.1.2 标准化 经典C: The C Programming Language, K&amp;amp;R C89或C90: ANSI标准X3.159-1989,</description></item></channel></rss>