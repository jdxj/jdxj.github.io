<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Linux性能优化实战 on jdxj</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</link><description>Recent content in Linux性能优化实战 on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 18 Apr 2023 16:34:35 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml"/><item><title>磁盘性能指标</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</link><pubDate>Sat, 30 Sep 2023 13:28:54 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</guid><description>使用率，是指磁盘处理 I/O 的时间百分比。过高的使用率（比如超过 80%），通常意味着磁盘 I/O 存在性能瓶颈。 饱和度，是指磁盘处理 I/O 的繁忙程度。过高的饱</description></item><item><title>I/O栈</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/io%E6%A0%88/</link><pubDate>Sat, 30 Sep 2023 13:11:44 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/io%E6%A0%88/</guid><description>我们可以把 Linux 存储系统的 I/O 栈，由上到下分为三个层次，分别是文件系统层、通用块层和设备层。 文件系统层，包括虚拟文件系统和其他各种文件系统的具体实</description></item><item><title>文件系统I/O</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9Fio/</link><pubDate>Sat, 30 Sep 2023 12:19:12 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9Fio/</guid><description>文件读写方式的各种差异，导致 I/O 的分类多种多样。最常见的有，缓冲与非缓冲 I/O、直接与非直接 I/O、阻塞与非阻塞 I/O、同步与异步 I/O 等。 缓冲/</description></item><item><title>Linux文件系统架构</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link><pubDate>Sat, 30 Sep 2023 12:08:56 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/file-system/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</guid><description>在 Linux 中一切皆文件。不仅普通的文件和目录，就连块设备、套接字、管道等，也都要通过统一的文件系统来管理。 索引节点，简称为 inode，用来记录文件</description></item><item><title>内存问题定位方法</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/</link><pubDate>Fri, 29 Sep 2023 14:19:19 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/</guid><description>内存性能指标 第一类 已用内存和剩余内存很容易理解，就是已经使用和还未使用的内存。 共享内存是通过 tmpfs 实现的，所以它的大小也就是 tmpfs 使用的内存大小。t</description></item><item><title>swap</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/swap/</link><pubDate>Fri, 29 Sep 2023 13:43:10 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/swap/</guid><description>可回收的内存 文件页: buffer, cache 匿名页: 应用程序动态分配的堆内存 现在的内存便宜多了，服务器一般也会配置很大的内存，那是不是说 Swap 就没有用武之地了呢？ 一</description></item><item><title>内存泄漏</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link><pubDate>Fri, 29 Sep 2023 12:04:40 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</guid><description>栈内存由系统自动分配和管理。一旦程序运行超出了这个局部变量的作用域，栈内存就会被系统自动回收，所以不会产生内存泄漏的问题。 堆内存由应用程序自</description></item><item><title>buffer和cache的区别</title><link>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/buffer%E5%92%8Ccache%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Fri, 29 Sep 2023 09:56:30 +0800</pubDate><guid>https://jdxj.github.io/posts/books/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/memory/buffer%E5%92%8Ccache%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>man free Buffers 是内核缓冲区用到的内存，对应的是 /proc/meminfo 中的 Buffers 值。 Cache 是内核页缓存和 Slab 用到的内存，对应的是 /proc/meminfo 中的 Cached 与 SReclaimable 之和。 1 2 3 4 5 $ cat /proc/meminfo | grep -E &amp;#34;SReclaimable|Cached|Buffers&amp;#34; Buffers: 818084 kB Cached: 7201820</description></item></channel></rss>