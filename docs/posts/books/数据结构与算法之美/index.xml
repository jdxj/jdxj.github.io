<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>数据结构与算法之美 on jdxj</title><link>https://jdxj.github.io/posts/books/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/</link><description>Recent content in 数据结构与算法之美 on jdxj</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 19 Apr 2023 10:58:26 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/books/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/index.xml" rel="self" type="application/rss+xml"/><item><title>数组</title><link>https://jdxj.github.io/posts/books/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E7%BB%84/</link><pubDate>Thu, 20 Apr 2023 15:03:56 +0800</pubDate><guid>https://jdxj.github.io/posts/books/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E7%BB%84/</guid><description>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。 随机访问 数组支持随机访问，根据下标随机访问的时</description></item><item><title>复杂度分析</title><link>https://jdxj.github.io/posts/books/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</link><pubDate>Wed, 19 Apr 2023 10:59:41 +0800</pubDate><guid>https://jdxj.github.io/posts/books/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</guid><description>大 O 复杂度表示法 1 2 3 4 5 6 7 8 int cal(int n) { int sum = 0; int i = 1; for (; i &amp;lt;= n; ++i) { sum = sum + i; } return sum; } T(n) = (2n+2)*unit_time 1 2 3 4 5 6 7 8 9 10 11 int cal(int n) { int sum = 0; int i = 1;</description></item></channel></rss>