<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Redis设计与实现 on jdxj</title><link>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link><description>Recent content in Redis设计与实现 on jdxj</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 18 Apr 2023 13:02:33 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>第5章 跳跃表</title><link>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC5%E7%AB%A0-%E8%B7%B3%E8%B7%83%E8%A1%A8/</link><pubDate>Fri, 21 Apr 2023 16:26:08 +0800</pubDate><guid>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC5%E7%AB%A0-%E8%B7%B3%E8%B7%83%E8%A1%A8/</guid><description>5.1 跳跃表的实现 图5-1 一个跳跃表 图片最左边的是zskiplist结构 header：指向跳跃表的表头节点 tail：指向跳跃表的表尾节点 leve</description></item><item><title>第4章 字典</title><link>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC4%E7%AB%A0-%E5%AD%97%E5%85%B8/</link><pubDate>Fri, 21 Apr 2023 13:29:08 +0800</pubDate><guid>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC4%E7%AB%A0-%E5%AD%97%E5%85%B8/</guid><description>4.1 字典的实现 4.1.1 哈希表 dict.h/dictht 1 2 3 4 5 6 7 8 9 10 11 typedef struct dictht { //哈希表数组 dictEntry **table; //哈希表大小 unsigned long size; //哈希表大小掩码，用于计算索引值 //总是等于si</description></item><item><title>第3章 链表</title><link>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC3%E7%AB%A0-%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 18 Apr 2023 16:05:43 +0800</pubDate><guid>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC3%E7%AB%A0-%E9%93%BE%E8%A1%A8/</guid><description>3.1 链表和链表节点的实现 adlist.h/listNode 1 2 3 4 5 6 7 8 typedef struct listNode { // 前置节点 struct listNode * prev; // 后置节点 struct listNode * next; //节点的值 void * value; }listNode; 图3-1 由多个listNode组成的</description></item><item><title>第2章 简单动态字符串 Simple Dynamic String</title><link>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC2%E7%AB%A0-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Tue, 18 Apr 2023 13:09:02 +0800</pubDate><guid>https://jdxj.github.io/posts/books/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E7%AC%AC2%E7%AB%A0-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>2.1 SDS的定义 sds.h/sdshdr 1 2 3 4 5 6 7 8 9 struct sdshdr { //记录buf数组中已使用字节的数量 //等于SDS所保存字符串的长度 int len; //记录buf数组中未使用字</description></item></channel></rss>