<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>设计模式之美 on jdxj</title><link>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/</link><description>Recent content in 设计模式之美 on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 18 Apr 2023 12:37:31 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/index.xml" rel="self" type="application/rss+xml"/><item><title>规范</title><link>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E8%A7%84%E8%8C%83/</link><pubDate>Thu, 25 May 2023 23:24:45 +0800</pubDate><guid>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E8%A7%84%E8%8C%83/</guid><description>命名 命名长度 作用域大的长点 作用域小的短点 利用上下文简化命令 属性名可以不加user 1 2 3 4 5 6 public class User { private String userName; private String userPassword; private String userAvatarUrl; //... } 函数参数 1 2 3 public void</description></item><item><title>重构</title><link>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E9%87%8D%E6%9E%84/</link><pubDate>Wed, 24 May 2023 18:51:38 +0800</pubDate><guid>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E9%87%8D%E6%9E%84/</guid><description>为什么要重构（why）？ 保证代码质量 对工程师本身技术成长有意义 到底重构什么（what）？ 大型重构指的是对顶层代码设计的重构，包括：系统、模块</description></item><item><title>面向对象、设计原则、设计模式、编程规范和代码重构五者之间的联系</title><link>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E4%BA%94%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB/</link><pubDate>Tue, 18 Apr 2023 12:41:26 +0800</pubDate><guid>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E4%BA%94%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB/</guid><description>面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。 设计原则是</description></item><item><title>何时应用设计模式</title><link>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E4%BD%95%E6%97%B6%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 18 Apr 2023 12:31:29 +0800</pubDate><guid>https://jdxj.github.io/posts/books/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/%E4%BD%95%E6%97%B6%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>设计思想、设计原则、设计模式一个最重要的应用场景就是在重构的时候。</description></item></channel></rss>