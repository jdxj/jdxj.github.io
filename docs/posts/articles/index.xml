<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Articles on jdxj</title><link>https://jdxj.github.io/posts/articles/</link><description>Recent content in Articles on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 20 Dec 2022 11:10:11 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>32位处理器的寻址方式</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/32%E4%BD%8D%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 31 Aug 2023 16:42:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/32%E4%BD%8D%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</guid><description>16位处理器的内存寻址方式 指定有效地址可以使用基址寄存器BX、BP，变址（索引）寄存器SI和DI，同时还可以加上一个8位或16位的位移。 32</description></item><item><title>现代处理器的结构和特点</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E7%8E%B0%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E7%89%B9%E7%82%B9/</link><pubDate>Thu, 31 Aug 2023 15:59:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E7%8E%B0%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E7%89%B9%E7%82%B9/</guid><description>流水线 为了提高处理器的执行效率和速度，可以把一条指令的执行过程分解成若干个细小的步骤，并分配给相应的单元来完成。各个单元的执行是独立的、并行</description></item><item><title>32位x86</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/32%E4%BD%8Dx86/</link><pubDate>Thu, 31 Aug 2023 13:53:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/32%E4%BD%8Dx86/</guid><description>IA-32架构的基本执行环境 寄存器的扩展 32位处理器内部的通用寄存器 指令的源操作数和目的操作数必须具有相同的长度，个别特殊用途的指令除外。 如</description></item><item><title>中断</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E4%B8%AD%E6%96%AD/</link><pubDate>Tue, 29 Aug 2023 15:30:42 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E4%B8%AD%E6%96%AD/</guid><description>外部硬件中断 从处理器外面来的中断信号 外部硬件中断是通过两个信号线引入处理器内部的。从很早的时候起，也就是8086处理器的时代，这两根线的名字</description></item><item><title>文本模式下控制显卡</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E6%96%87%E6%9C%AC%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%8E%A7%E5%88%B6%E6%98%BE%E5%8D%A1/</link><pubDate>Tue, 29 Aug 2023 12:08:32 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E6%96%87%E6%9C%AC%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%8E%A7%E5%88%B6%E6%98%BE%E5%8D%A1/</guid><description>光标寄存器 打印字符超过一行时, 显卡不会自动换行, 需要程序控制光标 两个光标寄存器组成16位, 存储了光标位置 = 80*i+j (0&amp;lt;=i&amp;lt;=24, 0&amp;lt;=j&amp;lt;=79) 指定光标寄存器. 访问显卡中的</description></item><item><title>过程调用</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/</link><pubDate>Mon, 28 Aug 2023 10:05:21 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/</guid><description>处理器可以用过程调用指令转移到这段代码执行，在遇到过程返回指令时重新返回到调用处的下一条指令接着执行。 要调用过程，需要该过程的地址。一般来说</description></item><item><title>加载器工作流程</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Sun, 27 Aug 2023 11:13:52 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>加载器需要了解如何加载用户程序 加载器与用户程序之间的协议部分 1 SECTION header vstart=0 因为它是“头部”，所以，该段当然必须是第一个被定义的段，且总是位于整个源</description></item><item><title>段</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E6%AE%B5/</link><pubDate>Sun, 27 Aug 2023 10:07:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E6%AE%B5/</guid><description>定义段 1 2 3 SECTION 段名称 ; 或 SEGMENT 段名称 未定义段的内容自成一个段 在编写源程序时定义的段也必须至少按16字节对齐。 要在编写程序时指定段的对齐方式，应该</description></item><item><title>8086处理器的寻址方式</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</link><pubDate>Fri, 25 Aug 2023 16:01:13 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</guid><description>处理器的一生，是忙碌的一生，只要它工作着，就必定是在取指令和执行指令。它就像勤劳的牛，吃的是电，挤出来的还是电，不过是另一种形式的电。</description></item><item><title>标志寄存器</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/</link><pubDate>Thu, 24 Aug 2023 11:03:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/</guid><description>8086标志寄存器 ZF, 当处理器执行一条算术或者逻辑运算指令后, 如果计算结果为0，这一位被置成1，表示计算结果为0是“真”的；否则清除此位(0)</description></item><item><title>通用寄存器的扩展</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E6%89%A9%E5%B1%95/</link><pubDate>Thu, 24 Aug 2023 00:01:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E6%89%A9%E5%B1%95/</guid><description>在64位处理器上，这些寄存器再次被扩展，达到了64位，即RAX、RBX、RCX、RDX、RSI、RDI、RBP、RSP和RIP。同时，它们的</description></item><item><title>nasm指令</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/nasm%E6%8C%87%E4%BB%A4/</link><pubDate>Wed, 23 Aug 2023 16:14:51 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/nasm%E6%8C%87%E4%BB%A4/</guid><description>div 无符号除法指令 可以做两种类型的除法 16位被除数(必须放在ax中), 8位除数(通用寄存器/内存), 执行后商在al中, 余数在ah中 1 2 3 4 5 6</description></item><item><title>nasm标号</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/nasm%E6%A0%87%E5%8F%B7/</link><pubDate>Wed, 23 Aug 2023 15:59:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/nasm%E6%A0%87%E5%8F%B7/</guid><description>1 infi: jmp near infi 标号可以由字母、数字、_、$、#、@、~、.、?组成，但必须以字母、. _和?中的任意一个打头。 $标记 1 2 jmp near $; 等同于 infi: jmp near infi $$标</description></item><item><title>字符模式</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/%E5%AD%97%E7%AC%A6%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 23 Aug 2023 13:16:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/%E5%AD%97%E7%AC%A6%E6%A8%A1%E5%BC%8F/</guid><description>K是闪烁位，为0时不闪烁，为1时闪烁；I是亮度位，为0时正常亮度，为1时呈高亮。</description></item><item><title>8086引导过程</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E5%BC%95%E5%AF%BC%E8%BF%87%E7%A8%8B/</link><pubDate>Tue, 22 Aug 2023 16:22:39 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E5%BC%95%E5%AF%BC%E8%BF%87%E7%A8%8B/</guid><description>8086地址空间为1MB, ROM占内存空间顶端64KB(0xF0000~0xFFFFF), DRAM占内存空间低640KB(0x00000~0</description></item><item><title>8086的内存分段机制</title><link>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 21 Aug 2023 12:54:01 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/x86/8086%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6/</guid><description>分段机制能解决程序重定位问题. 在进行数据传送或者算术逻辑运算的时候，使用算术逻辑部件(ALU)。比如，将AX的内容和CX的内容相加，结果仍在</description></item><item><title>构图</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E6%9E%84%E5%9B%BE/</link><pubDate>Sun, 13 Aug 2023 07:40:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E6%9E%84%E5%9B%BE/</guid><description>构图法 居中法构图 主体在画面中占比很大 合影 拍对称的场景 三分法构图 横向主线条出现的时候往往就是地平线、水平线一类的。如果地面或者海面上的景物比较</description></item><item><title>对焦</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%AF%B9%E7%84%A6/</link><pubDate>Sat, 12 Aug 2023 14:49:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%AF%B9%E7%84%A6/</guid><description>MF 手动对焦, 使用时机 相机只能手动对焦。比如徕卡M等，不会使用自动对焦的转接环。 非要对焦在无反差的地方（比如说拍白墙）或者很暗的环境。 对于高速</description></item><item><title>景深</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E6%99%AF%E6%B7%B1/</link><pubDate>Sat, 12 Aug 2023 14:39:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E6%99%AF%E6%B7%B1/</guid><description>要点 景深和光圈、焦距、拍摄距离有关。 前景深比后景深要浅（短），前面的容易“虚”，后面的不容易虚。 随着拍摄距离、焦距、光圈等参数的变化，后景深</description></item><item><title>感光度</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E6%84%9F%E5%85%89%E5%BA%A6/</link><pubDate>Sat, 12 Aug 2023 10:28:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E6%84%9F%E5%85%89%E5%BA%A6/</guid><description>一般来说，感光度标准值是ISO 100。部分厂商生产的相机的感光度标准值是ISO 200。在“胶片时代”，胶片的感光度越高，银盐颗粒越大，照片的</description></item><item><title>快门</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%BF%AB%E9%97%A8/</link><pubDate>Sat, 12 Aug 2023 10:19:59 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%BF%AB%E9%97%A8/</guid><description>快门速度就是指曝光时间。快门速度越高，曝光时间越短，相对来说曝光量越小。快门速度越低，曝光时间越长，相对来说曝光量越大。 一般来说： 比1/4秒</description></item><item><title>光圈的作用</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%85%89%E5%9C%88%E7%9A%84%E4%BD%9C%E7%94%A8/</link><pubDate>Sat, 12 Aug 2023 10:09:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%85%89%E5%9C%88%E7%9A%84%E4%BD%9C%E7%94%A8/</guid><description>光圈决定了通光速率 光圈越大照片越明亮 拍摄星空最小需要f/2.8 光圈影响虚化效果 光圈越大越容易虚化 85mm焦距和f/1.4光圈 85mm焦距和f</description></item><item><title>取景</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%8F%96%E6%99%AF/</link><pubDate>Fri, 11 Aug 2023 16:13:41 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E5%8F%96%E6%99%AF/</guid><description>取景范围 选择拍什么而不拍什么 坏景 好一些景 好景 拍摄主体是教堂 取景进画面的元素尽量对主题有帮助 取景角度 经典的斜上45°俯拍 取景角度也可以决定画面</description></item><item><title>焦距与透视</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E7%84%A6%E8%B7%9D%E4%B8%8E%E9%80%8F%E8%A7%86/</link><pubDate>Fri, 11 Aug 2023 16:03:50 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E7%84%A6%E8%B7%9D%E4%B8%8E%E9%80%8F%E8%A7%86/</guid><description>透视就是近大远小 使用广角镜头拍摄往往离得近，所以透视效果明显； 使用长焦镜头拍摄往往离得远，所以透视效果不明显。 24mm,f/1.4 拍摄距离非常短，所以有强烈的</description></item><item><title>等效焦距</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E7%AD%89%E6%95%88%E7%84%A6%E8%B7%9D/</link><pubDate>Fri, 11 Aug 2023 15:32:00 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E7%AD%89%E6%95%88%E7%84%A6%E8%B7%9D/</guid><description>长焦易得，广角难求</description></item><item><title>不同焦距适合的题材</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E4%B8%8D%E5%90%8C%E7%84%A6%E8%B7%9D%E9%80%82%E5%90%88%E7%9A%84%E9%A2%98%E6%9D%90/</link><pubDate>Fri, 11 Aug 2023 14:59:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E4%B8%8D%E5%90%8C%E7%84%A6%E8%B7%9D%E9%80%82%E5%90%88%E7%9A%84%E9%A2%98%E6%9D%90/</guid><description>拍摄什么题材，就带上什么镜头。</description></item><item><title>不同焦距对应的不同视角</title><link>https://jdxj.github.io/posts/articles/jdxj/photography/%E4%B8%8D%E5%90%8C%E7%84%A6%E8%B7%9D%E5%AF%B9%E5%BA%94%E7%9A%84%E4%B8%8D%E5%90%8C%E8%A7%86%E8%A7%92/</link><pubDate>Fri, 11 Aug 2023 14:53:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/photography/%E4%B8%8D%E5%90%8C%E7%84%A6%E8%B7%9D%E5%AF%B9%E5%BA%94%E7%9A%84%E4%B8%8D%E5%90%8C%E8%A7%86%E8%A7%92/</guid><description/></item><item><title>proxy模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/proxy%E6%A8%A1%E5%9D%97/</link><pubDate>Tue, 08 Aug 2023 13:37:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/proxy%E6%A8%A1%E5%9D%97/</guid><description>content阶段</description></item><item><title>Nginx负载均衡算法</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 08 Aug 2023 12:58:13 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</guid><description>round-robin ip_hash hash/一致性hash least_conn</description></item><item><title>Nginx反向代理相关指令</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</link><pubDate>Tue, 08 Aug 2023 12:51:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</guid><description>upstream相关指令 upstream keepalive keepalive_requests keepalive_timeout server指令 proxy_http_version指令 proxy_set_header指令 resolver</description></item><item><title>geoip模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/geoip%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 07 Aug 2023 19:34:21 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/geoip%E6%A8%A1%E5%9D%97/</guid><description>默认不启用, 启用&amp;ndash;with-http_geoip_module geoip_city指令</description></item><item><title>geo模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/geo%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 07 Aug 2023 19:29:41 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/geo%E6%A8%A1%E5%9D%97/</guid><description>geo指令</description></item><item><title>split_clients模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/split_clients%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 07 Aug 2023 19:20:22 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/split_clients%E6%A8%A1%E5%9D%97/</guid><description>实现AB测试 murmurHash2算法 hash(key)/max * 100% split_clients</description></item><item><title>map模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/map%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 07 Aug 2023 19:10:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/map%E6%A8%A1%E5%9D%97/</guid><description>类似于编程语言中的switch map指令</description></item><item><title>secure_link模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/secure_link%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 07 Aug 2023 18:39:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/secure_link%E6%A8%A1%E5%9D%97/</guid><description>防盗链 默认不启用, 启用-with-http_secure_link_module 原理, 客户端只能拿到哈希过的url, url需要包含的信息 资源</description></item><item><title>referer模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/referer%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 07 Aug 2023 18:26:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/referer%E6%A8%A1%E5%9D%97/</guid><description>valid_referers指令</description></item><item><title>http_*_filter系列模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/http_filter%E7%B3%BB%E5%88%97%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 07 Aug 2023 16:38:46 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/http_filter%E7%B3%BB%E5%88%97%E6%A8%A1%E5%9D%97/</guid><description>content阶段之前或之后</description></item><item><title>log模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/log%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 16:38:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/log%E6%A8%A1%E5%9D%97/</guid><description>log阶段</description></item><item><title>autoindex模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/autoindex%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 16:25:04 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/autoindex%E6%A8%A1%E5%9D%97/</guid><description>content阶段</description></item><item><title>index模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/index%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 16:24:55 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/index%E6%A8%A1%E5%9D%97/</guid><description>content阶段</description></item><item><title>mirror模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/mirror%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 15:21:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/mirror%E6%A8%A1%E5%9D%97/</guid><description>precontent阶段</description></item><item><title>try_files模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/try_files%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 15:16:19 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/try_files%E6%A8%A1%E5%9D%97/</guid><description>precontent阶段</description></item><item><title>auth_request模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/auth_request%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 13:19:46 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/auth_request%E6%A8%A1%E5%9D%97/</guid><description>access阶段</description></item><item><title>auth_basic模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/auth_basic%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 13:11:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/auth_basic%E6%A8%A1%E5%9D%97/</guid><description>access阶段</description></item><item><title>access模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/access%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 13:08:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/access%E6%A8%A1%E5%9D%97/</guid><description>access阶段</description></item><item><title>limit_req模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/limit_req%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 12:46:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/limit_req%E6%A8%A1%E5%9D%97/</guid><description>preaccess阶段</description></item><item><title>limit_conn模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/limit_conn%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 12:05:42 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/limit_conn%E6%A8%A1%E5%9D%97/</guid><description>preaccess阶段</description></item><item><title>http_core模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/http_core%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 06 Aug 2023 10:54:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/http_core%E6%A8%A1%E5%9D%97/</guid><description>find_config阶段, access阶段, content阶段</description></item><item><title>rewrite模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/rewrite%E6%A8%A1%E5%9D%97/</link><pubDate>Sat, 05 Aug 2023 18:28:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/rewrite%E6%A8%A1%E5%9D%97/</guid><description>rewrite阶段</description></item><item><title>realip模块</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/realip%E6%A8%A1%E5%9D%97/</link><pubDate>Sat, 05 Aug 2023 18:03:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/realip%E6%A8%A1%E5%9D%97/</guid><description>postread阶段</description></item><item><title>Nginx处理http请求的11个阶段</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E5%A4%84%E7%90%86http%E8%AF%B7%E6%B1%82%E7%9A%8411%E4%B8%AA%E9%98%B6%E6%AE%B5/</link><pubDate>Sat, 05 Aug 2023 15:24:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E5%A4%84%E7%90%86http%E8%AF%B7%E6%B1%82%E7%9A%8411%E4%B8%AA%E9%98%B6%E6%AE%B5/</guid><description>阶段 编号 阶段 说明 官方模块 1 post_read 读完header之后 realip 2 server_rewrite server级别的重写 rewrite 3 find_config 使用重写后的url匹配location 4 rewrite location</description></item><item><title>TLS安全套件格式说明</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/tls%E5%AE%89%E5%85%A8%E5%A5%97%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/</link><pubDate>Sat, 05 Aug 2023 12:43:54 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/tls%E5%AE%89%E5%85%A8%E5%A5%97%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/</guid><description>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 密钥交 身份 对称加密算法 摘要算法 换算法 验证 加密强度 分组模式</description></item><item><title>Nginx日志切割</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</link><pubDate>Sat, 05 Aug 2023 12:05:59 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/nginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</guid><description>1 $ nginx -s reopen # USR1</description></item><item><title>热部署nginx</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/%E7%83%AD%E9%83%A8%E7%BD%B2nginx/</link><pubDate>Sat, 05 Aug 2023 11:57:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/%E7%83%AD%E9%83%A8%E7%BD%B2nginx/</guid><description>备份原有nginx可执行文件, 并复制新可执行文件 通知使用新文件 1 $ kill -USR2 旧pid 通知优雅关闭旧worker 1 $ kill -WINCH 旧pid</description></item><item><title>编译nginx</title><link>https://jdxj.github.io/posts/articles/jdxj/nginx/%E7%BC%96%E8%AF%91nginx/</link><pubDate>Sat, 05 Aug 2023 11:26:54 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/nginx/%E7%BC%96%E8%AF%91nginx/</guid><description>1 2 3 $ ./configure --prefix=... $ make $ make install</description></item><item><title>Go String</title><link>https://jdxj.github.io/posts/articles/jdxj/go/string/</link><pubDate>Tue, 01 Aug 2023 10:28:51 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/string/</guid><description>String的特点 string类型的数据是不可变的 一旦声明了一个string类型的标识符，无论是常量还是变量，该标识符所指代的数据在整个程序</description></item><item><title>Vim中复制粘贴缩进错乱问题的解决方案</title><link>https://jdxj.github.io/posts/articles/wzy_1988/vim/</link><pubDate>Thu, 27 Jul 2023 16:03:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/wzy_1988/vim/</guid><description>原文 也可以使用寄存器&amp;quot;+</description></item><item><title>寄存器</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%AF%84%E5%AD%98%E5%99%A8/</link><pubDate>Thu, 27 Jul 2023 13:47:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%AF%84%E5%AD%98%E5%99%A8/</guid><description>Vim不使用单一的剪贴板进行剪切、复制与粘贴操作，而是为这些操作提供了多组寄存器。当使用删除、复制与粘贴命令时，我们可以明确指定它们中的某一</description></item><item><title>% 在匹配括号间跳转</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9C%A8%E5%8C%B9%E9%85%8D%E6%8B%AC%E5%8F%B7%E9%97%B4%E8%B7%B3%E8%BD%AC/</link><pubDate>Thu, 27 Jul 2023 13:44:28 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9C%A8%E5%8C%B9%E9%85%8D%E6%8B%AC%E5%8F%B7%E9%97%B4%E8%B7%B3%E8%BD%AC/</guid><description/></item><item><title>自动位置标记</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E8%87%AA%E5%8A%A8%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0/</link><pubDate>Thu, 27 Jul 2023 13:41:27 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E8%87%AA%E5%8A%A8%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0/</guid><description/></item><item><title>`{mark} 回到位置标记</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9B%9E%E5%88%B0%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0/</link><pubDate>Thu, 27 Jul 2023 13:38:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9B%9E%E5%88%B0%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0/</guid><description/></item><item><title>m{a-zA-Z} 设置位置标记</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E8%AE%BE%E7%BD%AE%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0/</link><pubDate>Thu, 27 Jul 2023 13:28:22 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E8%AE%BE%E7%BD%AE%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0/</guid><description/></item><item><title>文本对象</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%96%87%E6%9C%AC%E5%AF%B9%E8%B1%A1/</link><pubDate>Thu, 27 Jul 2023 13:15:46 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%96%87%E6%9C%AC%E5%AF%B9%E8%B1%A1/</guid><description>文本对象就是基于结构定义的文本区域 文本对象允许我们操作括号、被引用的文本、XML标签以及其他文本中的常见结构。 Vim 的文本对象由两个字符组成，第</description></item><item><title>基于字串的移动</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9F%BA%E4%BA%8E%E5%AD%97%E4%B8%B2%E7%9A%84%E7%A7%BB%E5%8A%A8/</link><pubDate>Thu, 27 Jul 2023 12:54:27 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9F%BA%E4%BA%8E%E5%AD%97%E4%B8%B2%E7%9A%84%E7%A7%BB%E5%8A%A8/</guid><description>由非空白字符序列组成，字串间以空白字符分隔 W, B, E, gE</description></item><item><title>基于单词的移动</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9F%BA%E4%BA%8E%E5%8D%95%E8%AF%8D%E7%9A%84%E7%A7%BB%E5%8A%A8/</link><pubDate>Thu, 27 Jul 2023 12:51:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9F%BA%E4%BA%8E%E5%8D%95%E8%AF%8D%E7%9A%84%E7%A7%BB%E5%8A%A8/</guid><description>一个单词由字母、数字、下划线，或其他非空白字符的序列组成，单词间以空白字符分隔</description></item><item><title>在实际行与屏幕行移动的命令</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9C%A8%E5%AE%9E%E9%99%85%E8%A1%8C%E4%B8%8E%E5%B1%8F%E5%B9%95%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 27 Jul 2023 12:48:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9C%A8%E5%AE%9E%E9%99%85%E8%A1%8C%E4%B8%8E%E5%B1%8F%E5%B9%95%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</guid><description/></item><item><title>Here is why vim uses hjkl keys as arrow keys</title><link>https://jdxj.github.io/posts/articles/catonmat/vim/</link><pubDate>Thu, 27 Jul 2023 12:42:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/catonmat/vim/</guid><description>原文</description></item><item><title>:[range]normal {cmd}重复执行普通模式命令</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 27 Jul 2023 12:11:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E5%91%BD%E4%BB%A4/</guid><description>在所有行后添加分号 :%normal A;</description></item><item><title>@: 重复上次ex命令</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%87%8D%E5%A4%8D%E4%B8%8A%E6%AC%A1ex%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 27 Jul 2023 12:04:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%87%8D%E5%A4%8D%E4%B8%8A%E6%AC%A1ex%E5%91%BD%E4%BB%A4/</guid><description>在运行过一次@:后，后面就可以用@@命令来重复它。</description></item><item><title>:[range]move{address} 移动行</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%A7%BB%E5%8A%A8%E8%A1%8C/</link><pubDate>Thu, 27 Jul 2023 11:59:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%A7%BB%E5%8A%A8%E8%A1%8C/</guid><description>简写 :m</description></item><item><title>:[range]copy{address} 复制行到指定位置</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%A4%8D%E5%88%B6%E8%A1%8C/</link><pubDate>Thu, 27 Jul 2023 11:46:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%A4%8D%E5%88%B6%E8%A1%8C/</guid><description>简写 :co :t 例子 把第6行复制到当前行下方 :6copy. 注意 该复制不使用寄存器</description></item><item><title>: 进入命令行模式</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 26 Jul 2023 14:52:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F/</guid><description>出于历史原因，在命令行模式中执行的命令又被称做 Ex 命令 在我们按/调出查找提示符或用&amp;lt;C-r&amp;gt;=访问表达式寄存器时，命令行模式也会被</description></item><item><title>gv 重选上次的选区</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/gv/</link><pubDate>Wed, 26 Jul 2023 14:23:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/gv/</guid><description>如果上次的选区被删除了，它也许会工作得不太正常。</description></item><item><title>三种可视模式</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E4%B8%89%E7%A7%8D%E5%8F%AF%E8%A7%86%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 26 Jul 2023 14:21:29 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E4%B8%89%E7%A7%8D%E5%8F%AF%E8%A7%86%E6%A8%A1%E5%BC%8F/</guid><description>v 激活面向字符的可视模式 V 激活面向行的可视模式 &amp;lt;C-v&amp;gt; 激活面向列块的可视模式 可以在不同风格的可视模式间切换 可以用o来切换活动端点</description></item><item><title>&lt;C-g> 进入选择模式</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%80%89%E6%8B%A9%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 26 Jul 2023 14:14:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%80%89%E6%8B%A9%E6%A8%A1%E5%BC%8F/</guid><description>在可视模式选中一些文本后, 按&amp;lt;C-g&amp;gt;进入选择模式, 随后可以直接对选中文本进行修改, 同时进入插入模式. 可重复使用&amp;lt;C-g&amp;</description></item><item><title>R 进入替换模式</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/r/</link><pubDate>Wed, 26 Jul 2023 13:17:00 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/r/</guid><description>gR会进入虚拟替换模式, 它会把制表符当成一组空格进行处理. 在虚拟替换模式中，是按屏幕上实际显示的宽度来替换字符的，而不是按文件中所保存的字符</description></item><item><title>&lt;C-k>{char1}{char2} 插入二合字符</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8F%92%E5%85%A5%E4%BA%8C%E5%90%88%E5%AD%97%E7%AC%A6/</link><pubDate>Wed, 26 Jul 2023 13:08:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8F%92%E5%85%A5%E4%BA%8C%E5%90%88%E5%AD%97%E7%AC%A6/</guid><description>&amp;lt;C-k&amp;gt;12 ½ 查看更多二合字符 :h digraphs-default :digraphs :h digraph-table</description></item><item><title>ga 查看光标下字符编码</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/ga/</link><pubDate>Wed, 26 Jul 2023 12:57:46 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/ga/</guid><description/></item><item><title>&lt;C-v>{code} 插入任意字符</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8F%92%E5%85%A5%E4%BB%BB%E6%84%8F%E5%AD%97%E7%AC%A6/</link><pubDate>Wed, 26 Jul 2023 12:48:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8F%92%E5%85%A5%E4%BB%BB%E6%84%8F%E5%AD%97%E7%AC%A6/</guid><description>&amp;lt;C-v&amp;gt;+三位十进制数字, 不足三位回车即可输入 &amp;lt;C-v&amp;gt;u+四位十六进制unicode码点, 不足四位回车即可输入 &amp;</description></item><item><title>&lt;C-r>= 利用表达式寄存器进行运算</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%84%E5%AD%98%E5%99%A8/</link><pubDate>Wed, 26 Jul 2023 12:43:51 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%84%E5%AD%98%E5%99%A8/</guid><description>&amp;lt;C-r&amp;gt;=6*35&amp;lt;CR&amp;gt;</description></item><item><title>&lt;C-r>{register} 粘贴寄存器中的文本</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%B2%98%E8%B4%B4%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/</link><pubDate>Wed, 26 Jul 2023 12:38:59 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%B2%98%E8%B4%B4%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/</guid><description>&amp;lt;C-r&amp;gt;&amp;lt;C-p&amp;gt;{register}按原义插入寄存器内的文本，并修正任何不必要的缩进</description></item><item><title>&lt;C-o> 插入-普通模式</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8F%92%E5%85%A5-%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 26 Jul 2023 12:26:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8F%92%E5%85%A5-%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F/</guid><description>在此模式中，我们可以执行一个普通模式命令，执行完后，马上就又返回到插入模式。</description></item><item><title>回到普通模式</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9B%9E%E5%88%B0%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 26 Jul 2023 12:23:51 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%9B%9E%E5%88%B0%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F/</guid><description>&amp;lt;Esc&amp;gt; &amp;lt;C-[&amp;gt;</description></item><item><title>&lt;C-u> 删至行首</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%A0%E8%87%B3%E8%A1%8C%E9%A6%96/</link><pubDate>Wed, 26 Jul 2023 12:16:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%A0%E8%87%B3%E8%A1%8C%E9%A6%96/</guid><description/></item><item><title>&lt;C-w> 删除前一个单词</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%A0%E9%99%A4%E5%89%8D%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D/</link><pubDate>Wed, 26 Jul 2023 12:16:24 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%A0%E9%99%A4%E5%89%8D%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D/</guid><description/></item><item><title>&lt;C-h> 删除前一个字符</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%A0%E9%99%A4%E5%89%8D%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6/</link><pubDate>Wed, 26 Jul 2023 12:15:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%A0%E9%99%A4%E5%89%8D%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6/</guid><description/></item><item><title>操作符待决模式</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%BE%85%E5%86%B3%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 25 Jul 2023 15:10:55 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%BE%85%E5%86%B3%E6%A8%A1%E5%BC%8F/</guid><description>Operator-Pending mode</description></item><item><title>模式: 操作符+动作命令=操作</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%A8%A1%E5%BC%8F-%E6%93%8D%E4%BD%9C%E7%AC%A6+%E5%8A%A8%E4%BD%9C%E5%91%BD%E4%BB%A4-%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 25 Jul 2023 14:58:32 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%A8%A1%E5%BC%8F-%E6%93%8D%E4%BD%9C%E7%AC%A6+%E5%8A%A8%E4%BD%9C%E5%91%BD%E4%BB%A4-%E6%93%8D%E4%BD%9C/</guid><description>Vim的操作符 查看完整的操作符 :h operator Vim的语法只有一条额外规则，即当一个操作符命令被连续调用两次时，它会作用于当前行。 所以 dd 删除当前行，而 &amp;gt;&amp;gt;</description></item><item><title>把所有数字当成十进制</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8A%8A%E6%89%80%E6%9C%89%E6%95%B0%E5%AD%97%E5%BD%93%E6%88%90%E5%8D%81%E8%BF%9B%E5%88%B6/</link><pubDate>Tue, 25 Jul 2023 14:48:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%8A%8A%E6%89%80%E6%9C%89%E6%95%B0%E5%AD%97%E5%BD%93%E6%88%90%E5%8D%81%E8%BF%9B%E5%88%B6/</guid><description>set nrformats=</description></item><item><title>[count]&lt;C-x> 对数字执行减法</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%AF%B9%E6%95%B0%E5%AD%97%E6%89%A7%E8%A1%8C%E5%87%8F%E6%B3%95/</link><pubDate>Tue, 25 Jul 2023 14:41:54 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%AF%B9%E6%95%B0%E5%AD%97%E6%89%A7%E8%A1%8C%E5%87%8F%E6%B3%95/</guid><description>abc124def</description></item><item><title>[count]&lt;C-a> 对数字执行加法</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%AF%B9%E6%95%B0%E5%AD%97%E6%89%A7%E8%A1%8C%E5%8A%A0%E6%B3%95/</link><pubDate>Tue, 25 Jul 2023 14:41:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%AF%B9%E6%95%B0%E5%AD%97%E6%89%A7%E8%A1%8C%E5%8A%A0%E6%B3%95/</guid><description>如果光标不在数字上，那么&amp;lt;C-a&amp;gt;命令将在当前行正向查找一个数字，如果找到了，它就径直跳到那里。</description></item><item><title>* 查找光标处的单词</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%98%9F/</link><pubDate>Tue, 25 Jul 2023 13:59:00 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%98%9F/</guid><description/></item><item><title>重复操作及回退</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%87%8D%E5%A4%8D%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%9B%9E%E9%80%80/</link><pubDate>Tue, 25 Jul 2023 13:54:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%87%8D%E5%A4%8D%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%9B%9E%E9%80%80/</guid><description/></item><item><title>, 返回前一个f所查找的字符</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%80%97%E5%8F%B7/</link><pubDate>Tue, 25 Jul 2023 13:50:07 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E9%80%97%E5%8F%B7/</guid><description/></item><item><title>; 查找下一个f指定的字符</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%86%E5%8F%B7/</link><pubDate>Tue, 25 Jul 2023 13:45:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%88%86%E5%8F%B7/</guid><description/></item><item><title>f{char} 在当前行查找字符</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/f/</link><pubDate>Tue, 25 Jul 2023 13:44:10 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/f/</guid><description/></item><item><title>复合命令</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%A4%8D%E5%90%88%E5%91%BD%E4%BB%A4/</link><pubDate>Tue, 25 Jul 2023 13:38:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E5%A4%8D%E5%90%88%E5%91%BD%E4%BB%A4/</guid><description/></item><item><title>模式: 移动+操作</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%A8%A1%E5%BC%8F-%E7%A7%BB%E5%8A%A8+%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 25 Jul 2023 13:35:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E6%A8%A1%E5%BC%8F-%E7%A7%BB%E5%8A%A8+%E6%93%8D%E4%BD%9C/</guid><description>理想模式：用一键移动，另一键执行</description></item><item><title>>G 增加缩进</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%BC%A9%E8%BF%9B/</link><pubDate>Tue, 25 Jul 2023 13:25:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%BC%A9%E8%BF%9B/</guid><description/></item><item><title>u 撤销修改</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/u/</link><pubDate>Tue, 25 Jul 2023 13:16:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/u/</guid><description>修改指 改变文档内文本的任意操作，其中包括在普通模式、可视模式以及命令行模式中所触发的命令 在插入模式中输入（或删除）的文本: i{insert some text}&amp;lt;Esc&amp;gt; 在插入模式中</description></item><item><title>. 重复上次修改/普通模式命令</title><link>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%82%B9/</link><pubDate>Tue, 25 Jul 2023 13:13:50 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/vim/%E7%82%B9/</guid><description/></item><item><title>学习能力</title><link>https://jdxj.github.io/posts/articles/jdxj/%E5%AD%A6%E4%B9%A0%E8%83%BD%E5%8A%9B/</link><pubDate>Mon, 17 Jul 2023 13:35:12 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E5%AD%A6%E4%B9%A0%E8%83%BD%E5%8A%9B/</guid><description>实战思维 需要动手实践 学习节奏 推进学习进度要考虑知识难易程度 收集反馈 深度学习 思考背后的逻辑是什么 复盘</description></item><item><title>如何拥有编程思维</title><link>https://jdxj.github.io/posts/articles/jdxj/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4/</link><pubDate>Mon, 17 Jul 2023 13:19:44 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4/</guid><description>大量的重复训练 看别人解决问题的思路，不断地模仿练习 在有一定的知识积淀以后，自己不断地尝试解决问题，实现目标 学习经典计算机语言 努力地提高交流水</description></item><item><title>[译]Go正则表达式示例</title><link>https://jdxj.github.io/posts/articles/colobu/regexp/</link><pubDate>Sun, 16 Jul 2023 12:48:00 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/colobu/regexp/</guid><description>原文</description></item><item><title>用Go转换字符编码</title><link>https://jdxj.github.io/posts/articles/jdxj/%E7%94%A8go%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</link><pubDate>Tue, 11 Jul 2023 11:02:46 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E7%94%A8go%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</guid><description>计算机字符集中的每个字符都有两个属性：码点（code point）和表示这个码点的内存编码（位模式，表示这个字符码点的二进制比特串）。 所谓码点</description></item><item><title>delve</title><link>https://jdxj.github.io/posts/articles/jdxj/delve/</link><pubDate>Mon, 10 Jul 2023 15:02:21 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/delve/</guid><description>安装 1 $ go install github.com/go-delve/delve/cmd/dlv@latest 使用 测试代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/jdxj/delve/pkg/foo&amp;#34; ) func main() { a := 3 b := 10 c := foo.Foo(a, b) fmt.Println(c) } 1 2 3 4 5 6 7 8 9 package foo func Foo(step, count int) int { sum := 0 for</description></item><item><title>理解整数溢出</title><link>https://jdxj.github.io/posts/articles/jdxj/%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/</link><pubDate>Sun, 02 Jul 2023 10:13:52 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/</guid><description>先看测试用例 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &amp;#34;fmt&amp;#34; func main() { var a, b, c int8 = 127, 1, 0 c = a + b // -128 fmt.Println(c) var d, e, f uint8 = 255, 1, 0 f = d + e // 0 fmt.Println(f) } 无符号整数的溢出很</description></item><item><title>Go 大杀器之性能剖析 PProf（上）</title><link>https://jdxj.github.io/posts/articles/eddycjy/pprof/</link><pubDate>Tue, 27 Jun 2023 20:29:54 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/eddycjy/pprof/</guid><description>原文</description></item><item><title>profile</title><link>https://jdxj.github.io/posts/articles/pkg/profile/</link><pubDate>Tue, 27 Jun 2023 19:58:29 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/pkg/profile/</guid><description>Simple profiling support package for Go</description></item><item><title>Golang中的热重启</title><link>https://jdxj.github.io/posts/articles/weixin/golang%E4%B8%AD%E7%9A%84%E7%83%AD%E9%87%8D%E5%90%AF/</link><pubDate>Sun, 25 Jun 2023 21:35:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/golang%E4%B8%AD%E7%9A%84%E7%83%AD%E9%87%8D%E5%90%AF/</guid><description>原文 热重启的原理 监听重启信号； 收到重启信号时fork子进程，同时需要将服务监听的socket文件描述符传递给子进程； 子进程接收并监听父进程传</description></item><item><title>在 golang 中是如何对 epoll 进行封装的？</title><link>https://jdxj.github.io/posts/articles/weixin/go%E5%B0%81%E8%A3%85epoll/</link><pubDate>Sun, 25 Jun 2023 20:41:59 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go%E5%B0%81%E8%A3%85epoll/</guid><description>原文 简单来说就是封装非阻塞fd, 用户代码在调用非阻塞fd时, 由go来实现调度, 将本goroutine阻塞, 但是不阻塞该线程.</description></item><item><title>Golang本地缓存选型对比及原理总结</title><link>https://jdxj.github.io/posts/articles/weixin/golang%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 25 Jun 2023 20:09:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/golang%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94%E5%8F%8A%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid><description>原文 比较的库 freecache bigcache fastcache offheap groupcache ristretto go-cache 实现零GC的方案 无GC：分配堆外内存(Mmap) 避免GC：map非指针优化(map[uint64]uint32)或</description></item><item><title>优化TLS</title><link>https://jdxj.github.io/posts/articles/jdxj/%E4%BC%98%E5%8C%96tls/</link><pubDate>Thu, 22 Jun 2023 19:20:42 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E4%BC%98%E5%8C%96tls/</guid><description>提升对称加密算法的性能 AES 是我们的首选对称加密算法 AES 只支持 3 种不同的密钥长度，分别是 128 位、192 位和 256 位，它们的安全性依次升高，运算时间也更长</description></item><item><title>随机数生成</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</link><pubDate>Thu, 22 Jun 2023 14:10:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</guid><description>Go密码学包crypto/rand提供了密码学级别的随机数生成器实现rand.Reader，在不同平台上rand.Reader使用的数据源有</description></item><item><title>数字签名</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</link><pubDate>Thu, 22 Jun 2023 13:55:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</guid><description>消息认证码虽然解决了消息发送者的身份认证问题，但由于采用消息认证码的通信双方共享密钥，因此对于一条通过了MAC验证的消息，通信双方依旧无法向</description></item><item><title>消息认证码</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</link><pubDate>Thu, 22 Jun 2023 13:45:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</guid><description>单向散列函数虽然能辨别出数据是否被篡改，但却无法辨别出数据是不是伪装的。因此，在这样的场合下，我们还需要对消息进行认证（Authentica</description></item><item><title>单向散列函数</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 22 Jun 2023 13:37:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</guid><description>除了输出长度固定、计算快速之外，密码学级别的单向散列函数还具有如下性质 强抗碰撞性：要找到散列值（摘要值）相同的两条不同的消息是非常困难的。 单</description></item><item><title>公钥密码</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</link><pubDate>Thu, 22 Jun 2023 12:49:30 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</guid><description>常见的密钥配送方案有事先共享密钥（事先以安全的方式将密钥交给通信方）、密钥分配中心（每个通信方要事先与密钥分配中心共享密钥）、Diffie-</description></item><item><title>分组密码算法</title><link>https://jdxj.github.io/posts/articles/jdxj/go/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 22 Jun 2023 01:07:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</guid><description>密码算法可以分为分组密码（block cipher）和流密码（stream cipher）两种。 分组密码是一种一次仅能处理固定长度数据块的算法。</description></item><item><title>Go密码学包</title><link>https://jdxj.github.io/posts/articles/jdxj/go/go%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8C%85/</link><pubDate>Thu, 22 Jun 2023 00:46:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/go/go%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8C%85/</guid><description>官方crypto包 src/crypto golang.org/x/crypto 分类 分组密码 cipher 五种分组模式 ECB CBC CFB OFB CTR des 对称密码 DES TDEA aes 对称密码 AES 公钥密码 tls TLS 1.2 TLS 1.3 x509 编码格式的密钥和证书的解析 rsa RSA elliptic 标准</description></item><item><title>TCP缓冲区</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%BC%93%E5%86%B2%E5%8C%BA/</link><pubDate>Wed, 21 Jun 2023 23:10:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%BC%93%E5%86%B2%E5%8C%BA/</guid><description>滑动窗口是怎样影响传输速度的？ TCP 报文发出去后，并不能立刻从内存中删除，因为重发时还需要用到它。由于 TCP 是由内核实现的，所以报文存放在内核缓冲区</description></item><item><title>事件驱动</title><link>https://jdxj.github.io/posts/articles/jdxj/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</link><pubDate>Wed, 21 Jun 2023 13:03:10 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</guid><description>事件是怎么产生的？ 读事件表示有到达的消息需要处理 写事件表示可以发送消息（TCP 连接的写缓冲区中有可用空间）。 tcp握手 在建立好的 TCP 连接上收发</description></item><item><title>一对多通讯</title><link>https://jdxj.github.io/posts/articles/jdxj/%E4%B8%80%E5%AF%B9%E5%A4%9A%E9%80%9A%E8%AE%AF/</link><pubDate>Wed, 21 Jun 2023 12:31:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E4%B8%80%E5%AF%B9%E5%A4%9A%E9%80%9A%E8%AE%AF/</guid><description>分布式系统的服务发现，使用人工配置既容易出错，速度也慢，而用广播就可以轻松实现自动化服务发现。 广播是怎么实现的？ 广播要改用 UDP 协议 网络设备天然</description></item><item><title>锁</title><link>https://jdxj.github.io/posts/articles/jdxj/%E9%94%81/</link><pubDate>Wed, 21 Jun 2023 11:20:01 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E9%94%81/</guid><description>互斥锁 当你无法判断锁住的代码会执行多久时，应该首选互斥锁 对于 99% 的线程级互斥锁而言，阻塞都是由操作系统内核实现的 线程获取锁失败时，增加了两次上</description></item><item><title>协程</title><link>https://jdxj.github.io/posts/articles/jdxj/%E5%8D%8F%E7%A8%8B/</link><pubDate>Wed, 21 Jun 2023 10:02:01 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E5%8D%8F%E7%A8%8B/</guid><description>无论基于多进程还是多线程，都难以实现高并发，这由两个原因所致 单个线程消耗的内存过多，比如，64 位的 Linux 为每个线程的栈分配了 8MB 的内存，还预分配了</description></item><item><title>DMA零拷贝技术</title><link>https://jdxj.github.io/posts/articles/zhihu/dma/</link><pubDate>Wed, 21 Jun 2023 00:18:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/zhihu/dma/</guid><description>原文 你可以在你的 Linux 系统通过下面这个命令，查看网卡是否支持 scatter-gather 特性： 1 $ ethtool -k eth0 | grep scatter-gather scatter-gather: on</description></item><item><title>零拷贝</title><link>https://jdxj.github.io/posts/articles/jdxj/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</link><pubDate>Tue, 20 Jun 2023 23:32:32 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</guid><description>// todo: 用go整一个 在内核态和用户态之间来回切换 要想提升传输文件的性能，需要从降低上下文切换的频率和内存拷贝次数两个方向入手。 零拷贝如何提升文件</description></item><item><title>索引</title><link>https://jdxj.github.io/posts/articles/jdxj/%E7%B4%A2%E5%BC%95/</link><pubDate>Tue, 20 Jun 2023 23:05:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E7%B4%A2%E5%BC%95/</guid><description>索引有很多，哈希表、红黑树、B 树都可以在内存中使用，如果我们需要数据规模上亿后还能提供微秒级的访问速度，那么作为最快的索引，哈希表是第一选择</description></item><item><title>内存分配</title><link>https://jdxj.github.io/posts/articles/jdxj/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link><pubDate>Tue, 20 Jun 2023 22:28:08 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid><description>内存申请流程 几乎所有程序都在使用 C 库内存池分配出的内存。C 库内存池影响着系统下依赖它的所有进程。 // todo: go 如何向系统申请内存? 选择 Ptmalloc2 还是 TCMa</description></item><item><title>CPU缓存</title><link>https://jdxj.github.io/posts/articles/jdxj/cpu%E7%BC%93%E5%AD%98/</link><pubDate>Tue, 20 Jun 2023 19:54:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/cpu%E7%BC%93%E5%AD%98/</guid><description>三级缓存要比一、二级缓存大许多倍，这是因为当下的 CPU 都是多核心的，每个核心都有自己的一、二级缓存，但三级缓存却是一颗 CPU 上所有核心共享的。 CPU 会区</description></item><item><title>DDD中聚合、聚合根的含义以及作用</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E8%81%9A%E5%90%88/</link><pubDate>Tue, 20 Jun 2023 14:07:30 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E8%81%9A%E5%90%88/</guid><description>原文 聚合 让实体和值对象协同工作的组织就是聚合, 它用来确保这些领域对象在实现共同的业务逻辑时，能保证数据的一致性。 聚合根 如果把聚合比作组织，那</description></item><item><title>DDD中实体与值对象是干什么的</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E5%AE%9E%E4%BD%93%E4%B8%8E%E5%80%BC%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</link><pubDate>Tue, 20 Jun 2023 13:25:51 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E5%AE%9E%E4%BD%93%E4%B8%8E%E5%80%BC%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</guid><description>原文 实体 实体拥有唯一标识符, 且标识符在经历过各种状态变更后仍能保持一致。对这些对象而言, 重要的不是其属性，而是其延续性和标识，对象的延续性和</description></item><item><title>DDD中限界上下文与通用语言的作用</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BD%9C%E7%94%A8/</link><pubDate>Tue, 20 Jun 2023 12:32:49 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E4%B8%AD%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BD%9C%E7%94%A8/</guid><description>原文 通用语言确定了项目团队内部交流的统一语言，而这个语言所在的语义环境则是由限界上下文来限定的，以确保语义的唯一性。而领域专家、架构师和开发</description></item><item><title>DDD划分领域、子域、核心域、支撑域的目的</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E5%88%92%E5%88%86%E9%A2%86%E5%9F%9F/</link><pubDate>Tue, 20 Jun 2023 12:10:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E5%88%92%E5%88%86%E9%A2%86%E5%9F%9F/</guid><description>原文 核心域、支撑域和通用域的主要目标是：通过领域划分，区分不同子域在公司内的不同功能属性和重要性，从而公司可对不同子域采取不同的资源投入和建</description></item><item><title>Counting Set Bits in an Interesting Way</title><link>https://jdxj.github.io/posts/articles/robalni/counting-set-bits-in-an-interesting-way/</link><pubDate>Mon, 19 Jun 2023 16:41:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/robalni/counting-set-bits-in-an-interesting-way/</guid><description>原文 1 2 3 4 5 6 7 8 unsigned popcnt(unsigned x) { unsigned diff = x; while (x) { x &amp;gt;&amp;gt;= 1; diff -= x; } return diff; }</description></item><item><title>Gotchas in the Go Network Packages Defaults</title><link>https://jdxj.github.io/posts/articles/baillie/gotchas-in-the-go-network-packages-defaults/</link><pubDate>Mon, 19 Jun 2023 14:10:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/baillie/gotchas-in-the-go-network-packages-defaults/</guid><description>原文 Timeouts Client timeouts 1 2 3 4 5 6 7 8 9 10 c := &amp;amp;http.Client{ Timeout: 5 * time.Second, Transport: &amp;amp;http.Transport{ DialContext: (&amp;amp;net.Dialer{ // This is the TCP connect timeout in this instance. Timeout: 2500 * time.Millisecond, }).DialContext, TLSHandshakeTimeout: 2500 * time.Millisecond, }, } Server timeouts 1 2 3 4 s := &amp;amp;http.Server{ ReadTimeout: 2500 * time.Millisecond, WriteTimeout: 5 * time.Second, } HTTP Response Bodies 1 2</description></item><item><title>Encrypting Data With SSH Keys and Golang</title><link>https://jdxj.github.io/posts/articles/earthly/encrypting-data-with-ssh-keys-and-golang/</link><pubDate>Mon, 19 Jun 2023 13:38:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/earthly/encrypting-data-with-ssh-keys-and-golang/</guid><description>原文</description></item><item><title>Don't defer Close() on writable files</title><link>https://jdxj.github.io/posts/articles/joeshaw/dont-defer-close-on-writable-files/</link><pubDate>Mon, 19 Jun 2023 13:11:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/joeshaw/dont-defer-close-on-writable-files/</guid><description>原文 Write()为了性能使用异步方式, 操作系统同步数据到磁盘的一个时机在Close(), 如果不捕获可能造成数据丢失. 安全的Close 1 2 3</description></item><item><title>ICMP</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/icmp/</link><pubDate>Sun, 18 Jun 2023 20:05:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/icmp/</guid><description/></item><item><title>LVS</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/lvs/</link><pubDate>Sun, 18 Jun 2023 19:19:39 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/lvs/</guid><description>三种工作模式 nat工作模式</description></item><item><title>Nat/Napt</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/nat/</link><pubDate>Sun, 18 Jun 2023 19:18:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/nat/</guid><description>nat napt 双向nat nat性能不好</description></item><item><title>ARP/RARP</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/arp/</link><pubDate>Sun, 18 Jun 2023 18:59:19 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/arp/</guid><description>2.5层协议</description></item><item><title>网络层</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/ip/</link><pubDate>Sun, 18 Jun 2023 18:34:08 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/ip/</guid><description>功能 ip寻址 选路 封装打包 分片 如何传输ip报文 直接传输 本地网络间接传输 内部选路协议 RIP OSPF 公网间接传输 外部选路协议 BGP 路由表</description></item><item><title>TCP Keep Alive</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-keep-alive/</link><pubDate>Sun, 18 Jun 2023 16:27:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-keep-alive/</guid><description>发送心跳周期 net.ipv4.tcp_keepalive_time = 7200 7200s 没数据交互时, 启动探测 探测包发送间隔 net.ipv4.tcp_keepalive_intvl = 75 探测包重试次数 net.ipv4.tcp_keepalive_probes = 9</description></item><item><title>TCP分手优化</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%88%86%E6%89%8B%E4%BC%98%E5%8C%96/</link><pubDate>Sun, 18 Jun 2023 16:17:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%88%86%E6%89%8B%E4%BC%98%E5%8C%96/</guid><description>net.ipv4.tcp_tw_reuse = 1 开启后, 作为客户端时新连接可以使用仍然处于TIME-WAIT状态的端口 由于timestamp的存在, 操作系统可以拒绝迟到的报文, net.ipv4.tcp_timestamps = 1</description></item><item><title>不建议开启tcp fast open功能</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E4%B8%8D%E5%BB%BA%E8%AE%AE%E5%BC%80%E5%90%AFtfo/</link><pubDate>Sat, 17 Jun 2023 16:37:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E4%B8%8D%E5%BB%BA%E8%AE%AE%E5%BC%80%E5%90%AFtfo/</guid><description>原文</description></item><item><title>TCP握手优化</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E6%8F%A1%E6%89%8B%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 17 Jun 2023 14:48:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E6%8F%A1%E6%89%8B%E4%BC%98%E5%8C%96/</guid><description>延长syn, accept队列 应用层connect超时时间 操作系统内核 服务器端syn_rcv状态 net.ipv4.tcp_max_syn_backlog: syn_rcvd状态连接的最大个数 net.ipv4.tcp_synack_retries: 被动建立</description></item><item><title>Berkeley Packet Filters</title><link>https://jdxj.github.io/posts/articles/ibm/berkeley-packet-filters/</link><pubDate>Sat, 17 Jun 2023 12:23:28 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/ibm/berkeley-packet-filters/</guid><description>原文</description></item><item><title>UDP Header</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/udp-header/</link><pubDate>Sat, 17 Jun 2023 11:23:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/udp-header/</guid><description/></item><item><title>IP Header</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/ip-header/</link><pubDate>Sat, 17 Jun 2023 11:10:16 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/ip-header/</guid><description>IPv4 Header IHL 头部长度, word(4byte) TL 总长度, byte Id 分片表示 Flags 分片控制 DF = 1 不能分片 MF = 1 中间分片 FO 分片内偏移, 8byte TTL 路由器跳数生存期 Protocol 承载协议 HC 校验和</description></item><item><title>TCP/IP协议层</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-ip%E5%88%86%E5%B1%82/</link><pubDate>Sat, 17 Jun 2023 10:47:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-ip%E5%88%86%E5%B1%82/</guid><description/></item><item><title>程序员进阶</title><link>https://jdxj.github.io/posts/articles/it-blog-cn/</link><pubDate>Wed, 14 Jun 2023 12:26:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/it-blog-cn/</guid><description>主页</description></item><item><title>使用随机端口</title><link>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</link><pubDate>Wed, 14 Jun 2023 12:07:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</guid><description>原文 listen的地址填:0</description></item><item><title>缓存更新的套路</title><link>https://jdxj.github.io/posts/articles/coolshell/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%9A%84%E5%A5%97%E8%B7%AF/</link><pubDate>Tue, 13 Jun 2023 13:07:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/coolshell/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%9A%84%E5%A5%97%E8%B7%AF/</guid><description>原文 更新缓存的的Design Pattern有四种： Cache aside Read through Write through Write behind caching</description></item><item><title>熔断</title><link>https://jdxj.github.io/posts/articles/oschina/%E7%86%94%E6%96%AD/</link><pubDate>Tue, 06 Jun 2023 22:33:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/oschina/%E7%86%94%E6%96%AD/</guid><description>原文</description></item><item><title>Redis中常见的四种统计模式</title><link>https://jdxj.github.io/posts/articles/jdxj/redis/redis%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%9F%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 04 Jun 2023 23:23:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/redis/redis%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%9F%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>聚合统计 集合的交, 差, 并集 SUNIONSTORE SDIFFSTORE SINTERSTORE 这些命令复杂度较高 排序统计 可以使用sorted set保证分页时, 元素不会串 ZRANGEBYSCORE 二值状态统计 bitmap SETBIT BITOP BITCOUNT 基数统计 指统</description></item><item><title>过多的使用String键会造成内存浪费</title><link>https://jdxj.github.io/posts/articles/jdxj/redis/%E9%81%BF%E5%85%8D%E8%BF%87%E5%A4%9A%E4%BD%BF%E7%94%A8string/</link><pubDate>Sun, 04 Jun 2023 19:45:35 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/redis/%E9%81%BF%E5%85%8D%E8%BF%87%E5%A4%9A%E4%BD%BF%E7%94%A8string/</guid><description>占用内存的元数据过多 全局hash表一个项是dictEntry 封装底层编码的RedisObject 如果想节约内存, 可以考虑使用底层编码为zip</description></item><item><title>Go 1.18 泛型全面讲解：一篇讲清泛型的全部</title><link>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</link><pubDate>Sun, 04 Jun 2023 15:54:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</guid><description>原文</description></item><item><title>软链接 硬链接</title><link>https://jdxj.github.io/posts/articles/jdxj/linux/%E8%BD%AF%E9%93%BE%E6%8E%A5-%E7%A1%AC%E9%93%BE%E6%8E%A5/</link><pubDate>Mon, 24 Apr 2023 13:31:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/linux/%E8%BD%AF%E9%93%BE%E6%8E%A5-%E7%A1%AC%E9%93%BE%E6%8E%A5/</guid><description>Linux系统中的文件链接分为软链接和硬链接两种。 软链接创建后，如果源文件被删除，则软链接将无法继续使用，可以跨分区和磁盘创建软链接。 硬链接</description></item><item><title>Redis内部编码</title><link>https://jdxj.github.io/posts/articles/jdxj/redis%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81/</link><pubDate>Fri, 21 Apr 2023 16:30:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/redis%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81/</guid><description>查看某key的内部编码 1 2 3 4 redis&amp;gt; RPUSH lst 1 3 5 10086 &amp;#34;hello&amp;#34; &amp;#34;world&amp;#34; (integer)6 redis&amp;gt; OBJECT ENCODING lst &amp;#34;ziplist&amp;#34; raw embstr hashtable linkedlist ziplist intset skiplist</description></item><item><title>Introducing the Go Race Detector</title><link>https://jdxj.github.io/posts/articles/go/go-race-detector/</link><pubDate>Wed, 19 Apr 2023 16:08:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/go/go-race-detector/</guid><description>原文</description></item><item><title>HTTP 代理原理及实现（一）</title><link>https://jdxj.github.io/posts/articles/imququ/http%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</link><pubDate>Mon, 17 Apr 2023 17:44:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/imququ/http%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</guid><description>原文 普通代理 代理服务器解析客户端req, 之后代理服务器向目标服务器发送该req 隧道代理 代理服务器监听CONNECT方法, 之后转发客户端发来的</description></item><item><title>Go语言高性能编程手册</title><link>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</link><pubDate>Mon, 17 Apr 2023 14:54:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</guid><description>原文 少使用反射 优先使用 strconv 而不是 fmt 少量的重复不比反射差 慎用 binary.Read 和 binary.Write 避免重复的字符串到字节切片的转换 指定容器容量 行内拼接字符串推荐使用运算符+ 非行</description></item><item><title>SSH 安全加固的一些措施</title><link>https://jdxj.github.io/posts/articles/zzz/ssh%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</link><pubDate>Mon, 17 Apr 2023 14:39:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/zzz/ssh%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</guid><description>原文 可用的简单配置 # 禁用旧版本的有漏洞的 SSH 协议 # (旧版本的 sshd 默认允许新旧版本(2,1)的协议，新版本的 sshd 默认只接受新版本(2)的协议） Protocol 2 #</description></item><item><title>安装K8s</title><link>https://jdxj.github.io/posts/articles/jdxj/k8s/</link><pubDate>Mon, 17 Apr 2023 13:38:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/k8s/</guid><description>安装Docker Install Docker Engine on Debian 配置containerd 1 2 3 4 $ containerd config default | tee /etc/containerd/config.toml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 $ vim /etc/containerd/config.toml SystemdCgroup = true $ systemctl restart containerd 安装K8s 关闭交换 1 2 $ swapoff -a $ vim /etc/fstab 官方安装教</description></item><item><title>延迟确认</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/</link><pubDate>Tue, 11 Apr 2023 20:34:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/</guid><description>延迟确认在很多 linux 机器上是没有办法关闭的 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 static void __tcp_ack_snd_check(struct sock *sk, int ofo_possible) { struct tcp_sock *tp = tcp_sk(sk); /* More than one full frame received... */ if (((tp-&amp;gt;rcv_nxt - tp-&amp;gt;rcv_wup) &amp;gt; tp-&amp;gt;ack.rcv_mss /* ...</description></item><item><title>Nagle</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/nagle/</link><pubDate>Tue, 11 Apr 2023 20:07:52 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/nagle/</guid><description>减少发送端频繁的发送小包给对方。 算法思路 if there is new data to send if the window size &amp;gt;= MSS and available data is &amp;gt;= MSS send complete MSS segment now else if there is unconfirmed data still in the pipe enqueue data in the buffer until an acknowledge is received else send data immediately end if</description></item><item><title>拥塞控制</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 10 Apr 2023 21:01:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</guid><description>todo: 找一个完整的拥塞控制图</description></item><item><title>滑动窗口</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link><pubDate>Sun, 09 Apr 2023 11:43:02 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid><description>TCP 包状态分类 粉色部分#1 (Bytes Sent and Acknowledged)：表示已发送且已收到 ACK 确认的数据包。 蓝色部分#2 (Bytes Sent but Not Yet Acknowledged)</description></item><item><title>超时重传</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0/</link><pubDate>Sun, 09 Apr 2023 11:08:12 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0/</guid><description>Retransmission TimeOut，RTO 计算RTO 经典方法 适用 RTT 波动较小的情况 取平均值 Smoothed round trip time，SRTT α 是平滑因子，建议值是0.8 ~ 0.9 SRTT = ( α * SRTT )</description></item><item><title>快速重传与SACK</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0/</link><pubDate>Sun, 09 Apr 2023 10:51:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0/</guid><description>当发送端收到 3 个或以上重复 ACK，就意识到之前发的包可能丢了，于是马上进行重传，不用傻傻的等到超时再重传。</description></item><item><title>Socket Options</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/socket-options/</link><pubDate>Sun, 09 Apr 2023 10:05:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/socket-options/</guid><description>SO_LINGER SO_LINGER 参数是一个 linger 结构体 1 2 3 4 struct linger { int l_onoff; /* linger active */ int l_linger; /* how many seconds to linger for */ }; l_onoff 用来表示是否启用 linger 特性，非 0 为启用，0 为禁用 ，linux 内核默认为禁</description></item><item><title>发生RST的情景</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%B8%B8%E8%A7%81rst/</link><pubDate>Sun, 09 Apr 2023 09:58:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%B8%B8%E8%A7%81rst/</guid><description>端口未监听 断电丢失连接 设置SO_LINGER为true 如果设置 SO_LINGER 为 true，linger 设置为 0，当调用 socket.close() 时， close 函数会立即返回，同时丢弃缓冲</description></item><item><title>MSL</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/msl/</link><pubDate>Sat, 08 Apr 2023 11:06:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/msl/</guid><description>Max Segment Lifetime MSL（报文最大生存时间）是 TCP 报文在网络中的最大生存时间。这个值与 IP 报文头的 TTL 字段有密切的关系。 TTL: IP 报文最大可经过的路由数 Linux 的套接字实</description></item><item><title>Linux内核参数优化及原理</title><link>https://jdxj.github.io/posts/articles/code2life/tcp%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 08 Apr 2023 10:06:49 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/code2life/tcp%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</guid><description>原文 修改内核参数的方法 编辑/etc/sysctl.conf添加配置 执行sysctl -p立即生效</description></item><item><title>一些关于BBR的文章</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/bbr%E5%88%86%E6%9E%90/</link><pubDate>Sat, 08 Apr 2023 09:56:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/bbr%E5%88%86%E6%9E%90/</guid><description>TCP拥塞控制及BBR原理分析 BBR TCP</description></item><item><title>Debian11开启BBR</title><link>https://jdxj.github.io/posts/articles/ahlxjg/bbr/</link><pubDate>Sat, 08 Apr 2023 09:11:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/ahlxjg/bbr/</guid><description>Debian11应该默认开启了, 验证 lsmod | grep bbr #或成功则会出现类似的内容 tcp_bbr 20480 1 参考 Debian11开启bbr</description></item><item><title>TCP Fast Open</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tfo/</link><pubDate>Wed, 05 Apr 2023 11:27:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tfo/</guid><description>TFO</description></item><item><title>SYN Cookie</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-cookie/</link><pubDate>Wed, 05 Apr 2023 11:12:14 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-cookie/</guid><description>用来解决 SYN Flood 攻击的，现在服务器上的 tcp_syncookies 都是默认等于 1，表示连接队列满时启用，等于 0 表示禁用，等于 2 表示始终启用。由 /proc/sys/net/</description></item><item><title>SYN Flood 攻击</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-flood/</link><pubDate>Wed, 05 Apr 2023 11:06:54 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-flood/</guid><description>客户端大量伪造 IP 发送 SYN 包，服务端回复的 ACK+SYN 去到了一个「未知」的 IP 地址，势必会造成服务端大量的连接处于 SYN_RCVD 状态，而服务器的 半连接队列大小也是有限的</description></item><item><title>连接队列</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</link><pubDate>Wed, 05 Apr 2023 10:21:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</guid><description>半连接队列（Incomplete connection queue），又称 SYN 队列 全连接队列（Completed connection queue），又称 Accept 队列 半连接队列（SYN Queu</description></item><item><title>如何在工作中学习</title><link>https://jdxj.github.io/posts/articles/plantegg/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 02 Apr 2023 18:53:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/plantegg/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/</guid><description>原文 学习要结合实践</description></item><item><title>连接状态转换</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</link><pubDate>Sun, 02 Apr 2023 17:44:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</guid><description>完整的状态转换 三次握手的状态变化 同时打开的状态变化 自连接的状态变化 其实就是同时打开, 步骤5, 6在原文当中是window update包, 所以s</description></item><item><title>MSS</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</link><pubDate>Sun, 02 Apr 2023 12:09:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</guid><description>MSS TCP 为了避免被发送方分片，会主动把数据分割成小段再交给网络层，最大的分段大小称之为 MSS（Max Segment Size）。 MSS = MTU - IP header头大小 -</description></item><item><title>MTU</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</link><pubDate>Sun, 02 Apr 2023 11:38:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</guid><description>MTU 数据链路层传输的帧大小是有限制的，不能把一个太大的包直接塞给链路层，这个限制被称为「最大传输单元（Maximum Transmission Unit, MTU）」 MTU是指整</description></item><item><title>TCP Options</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</link><pubDate>Sat, 01 Apr 2023 21:16:50 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</guid><description>可选项格式 时间戳选项 TCP Timestamps Option，TSopt 由4部分组成 类别（kind） 长度（Length） 发送方时间戳（TS value） 回显时间戳（T</description></item><item><title>TCP窗口大小</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</link><pubDate>Sat, 01 Apr 2023 21:10:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</guid><description>window size只有16位, 起初表示最大窗口为65535B 后来不够用就引入了TCP窗口缩放选项, 范围为0~14 0: 不缩放 !=0: 窗口大小为 windowSize * 2^n 窗口缩放在</description></item><item><title>TCP Flags</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</link><pubDate>Sat, 01 Apr 2023 21:07:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</guid><description>这些标记可以组合使用，比如 SYN+ACK，FIN+ACK 等 SYN（Synchronize）：用于发起连接数据包同步双方的初始序列号 ACK（A</description></item><item><title>TCP序列号/确认号</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</link><pubDate>Sat, 01 Apr 2023 18:23:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</guid><description>序列号 Sequence Number 序列号指的是本报文段第一个字节的序列号 32位无符号整数 初始序列号 在建立连接之初，通信双方都会各自选择一个序列号，称之为初始序列号。</description></item><item><title>TCP Header</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-header/</link><pubDate>Sat, 01 Apr 2023 18:21:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-header/</guid><description>TCP Options
-------------------------------- |type(1byte)|len(1byte)|content(len-2)| --------------------------------</description></item><item><title>TCP的特点</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</link><pubDate>Sat, 01 Apr 2023 17:39:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</guid><description>面向连接 可靠 校验和 序列号解决乱序, 重复 超时重传 流量控制, 拥塞控制 基于字节流 全双工</description></item><item><title>Go工程化 - 手摸手带你理解依赖注入</title><link>https://jdxj.github.io/posts/articles/weixin/di/</link><pubDate>Tue, 14 Mar 2023 16:01:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/di/</guid><description>原文</description></item><item><title>一文搞定Containerd的使用</title><link>https://jdxj.github.io/posts/articles/weixin/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9Acontainerd%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 14 Mar 2023 15:29:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9Acontainerd%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>了解啥是libcontainer、runc、containerd、CRI、OCI 原文</description></item><item><title>链路追踪（Tracing）的前世今生（上）</title><link>https://jdxj.github.io/posts/articles/weixin/tracing/</link><pubDate>Fri, 10 Mar 2023 14:41:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/tracing/</guid><description>原文</description></item><item><title>高可用Redis服务架构分析与搭建</title><link>https://jdxj.github.io/posts/articles/xuning/redis/</link><pubDate>Fri, 10 Mar 2023 14:19:36 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/xuning/redis/</guid><description>原文</description></item><item><title>如何获取客户端真实 IP？从 Gin 的一个 "Bug" 说起</title><link>https://jdxj.github.io/posts/articles/weixin/ip/</link><pubDate>Fri, 10 Mar 2023 13:56:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/ip/</guid><description>边缘节点应该用以下方法来设置 proxy_set_header X-Forwarded-For $remote_addr; 原文</description></item><item><title>Visual Representation of SQL Joins</title><link>https://jdxj.github.io/posts/articles/moffatt/sql-joins/</link><pubDate>Sun, 26 Feb 2023 11:54:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/moffatt/sql-joins/</guid><description>原文</description></item><item><title>A Visual Explanation of SQL Joins</title><link>https://jdxj.github.io/posts/articles/codinghorror/sql-joins/</link><pubDate>Sun, 26 Feb 2023 11:47:22 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/codinghorror/sql-joins/</guid><description>原文</description></item><item><title>Smantic</title><link>https://jdxj.github.io/posts/articles/smantic/</link><pubDate>Thu, 23 Feb 2023 10:06:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/smantic/</guid><description>主页</description></item><item><title>The Best Golang Blogs</title><link>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</link><pubDate>Tue, 21 Feb 2023 14:47:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</guid><description>原文</description></item><item><title>Plan9 Assembly</title><link>https://jdxj.github.io/posts/articles/cch123/plan9/</link><pubDate>Tue, 21 Feb 2023 14:36:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cch123/plan9/</guid><description>原文</description></item><item><title>Intellij Ideavim Repeat Key</title><link>https://jdxj.github.io/posts/articles/fillmem/intellij-ideavim-repeat-key/</link><pubDate>Tue, 21 Feb 2023 14:12:49 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/fillmem/intellij-ideavim-repeat-key/</guid><description>ideavim中没法长按按键重复字符解决办法</description></item><item><title>Golang Developer Roadmap</title><link>https://jdxj.github.io/posts/articles/alikhll/golang-developer-roadmap/</link><pubDate>Tue, 21 Feb 2023 13:51:24 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/alikhll/golang-developer-roadmap/</guid><description>原文</description></item><item><title>MySQL的COUNT是怎么执行的</title><link>https://jdxj.github.io/posts/articles/weixin/mysql%E7%9A%84count%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%A7%E8%A1%8C%E7%9A%84/</link><pubDate>Mon, 20 Feb 2023 17:28:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/mysql%E7%9A%84count%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%A7%E8%A1%8C%E7%9A%84/</guid><description>COUNT函数用于统计在符合搜索条件的记录中，指定的表达式expr不为NULL的行数有多少。 对于COUNT(*)、COUNT(常数)、COU</description></item><item><title>Socket是并发安全的吗</title><link>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</link><pubDate>Fri, 17 Feb 2023 14:51:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</guid><description>多线程并发读/写同一个TCP socket是线程安全的，因为TCP socket的读/写操作都上锁了。虽然线程安全，但依然不建议你这么做，因为T</description></item><item><title>RabbitMQ与Kafka选型对比</title><link>https://jdxj.github.io/posts/articles/skychen1218/rabbitmq%E4%B8%8Ekafka%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/</link><pubDate>Thu, 16 Feb 2023 16:52:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/skychen1218/rabbitmq%E4%B8%8Ekafka%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/</guid><description>主要看下模型对比. 原文</description></item><item><title>缓存与数据库一致性问题深度剖析</title><link>https://jdxj.github.io/posts/articles/rude3knife/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</link><pubDate>Thu, 16 Feb 2023 16:32:16 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/rude3knife/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</guid><description>原文</description></item><item><title>老板要我开发一个简单的工作流引擎</title><link>https://jdxj.github.io/posts/articles/duck-and-duck/%E8%80%81%E6%9D%BF%E8%A6%81%E6%88%91%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</link><pubDate>Thu, 16 Feb 2023 15:47:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/duck-and-duck/%E8%80%81%E6%9D%BF%E8%A6%81%E6%88%91%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</guid><description>原文</description></item><item><title>DDD兴起的原因以及与微服务的关系</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</link><pubDate>Thu, 16 Feb 2023 14:59:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</guid><description>DDD 是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。 原文</description></item><item><title>超全面 MySQL语句加锁分析</title><link>https://jdxj.github.io/posts/articles/zhangdetalk/%E8%B6%85%E5%85%A8%E9%9D%A2-mysql%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</link><pubDate>Tue, 07 Feb 2023 16:03:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/zhangdetalk/%E8%B6%85%E5%85%A8%E9%9D%A2-mysql%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</guid><description>原文</description></item><item><title>惊! 史上最全的select加锁分析(Mysql)</title><link>https://jdxj.github.io/posts/articles/rjzheng/%E6%83%8A-%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84select%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90-mysql/</link><pubDate>Mon, 06 Feb 2023 16:49:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/rjzheng/%E6%83%8A-%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84select%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90-mysql/</guid><description>该文章展示了事务隔离级别与锁的关系, 推荐阅读</description></item><item><title>Dave Cheney</title><link>https://jdxj.github.io/posts/articles/cheney/</link><pubDate>Wed, 28 Dec 2022 10:56:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cheney/</guid><description>主页</description></item><item><title>How to Ask Questions The Smart Way</title><link>https://jdxj.github.io/posts/articles/ryanhanwu/how-to-ask-questions/</link><pubDate>Sat, 24 Dec 2022 12:42:21 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/ryanhanwu/how-to-ask-questions/</guid><description>原文 在提问之前 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到</description></item><item><title>Go1.18快讯 新的IP包</title><link>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</link><pubDate>Fri, 23 Dec 2022 18:03:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</guid><description>原文</description></item><item><title>聊一个 string 和 []byte 转换问题</title><link>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 20 Dec 2022 14:18:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</guid><description>错误的使用uintptr转换结果可能被 GC. 原文</description></item><item><title>Designing Go Libraries</title><link>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</link><pubDate>Tue, 20 Dec 2022 10:17:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</guid><description>原文 1. Primary Concerns 1.1. Usability 建立惯例使库的特性可发现 潜在的错误使用 易于完成常见任务 Case Study: net/http 看起来有些繁琐 1 2 3 4 5 6 7 8 9 10 // import &amp;#34;net/http&amp;#34; req, err := http.NewRequest(http.MethodGet, &amp;#34;http://example.com&amp;#34;, nil /* body */) if err != nil</description></item></channel></rss>