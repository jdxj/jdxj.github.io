<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Articles on jdxj</title><link>https://jdxj.github.io/posts/articles/</link><description>Recent content in Articles on jdxj</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 20 Dec 2022 11:10:11 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>ICMP</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/icmp/</link><pubDate>Sun, 18 Jun 2023 20:05:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/icmp/</guid><description/></item><item><title>LVS</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/lvs/</link><pubDate>Sun, 18 Jun 2023 19:19:39 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/lvs/</guid><description>三种工作模式 nat工作模式</description></item><item><title>Nat/Napt</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/nat/</link><pubDate>Sun, 18 Jun 2023 19:18:03 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/nat/</guid><description>nat napt 双向nat nat性能不好</description></item><item><title>ARP/RARP</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/arp/</link><pubDate>Sun, 18 Jun 2023 18:59:19 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/arp/</guid><description>2.5层协议</description></item><item><title>网络层</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/ip/</link><pubDate>Sun, 18 Jun 2023 18:34:08 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/ip/</guid><description>功能 ip寻址 选路 封装打包 分片 如何传输ip报文 直接传输 本地网络间接传输 内部选路协议 RIP OSPF 公网间接传输 外部选路协议 BGP 路由表</description></item><item><title>TCP Keep Alive</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-keep-alive/</link><pubDate>Sun, 18 Jun 2023 16:27:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-keep-alive/</guid><description>发送心跳周期 net.ipv4.tcp_keepalive_time = 7200 7200s 没数据交互时, 启动探测 探测包发送间隔 net.ipv4.tcp_keepalive_intvl = 75 探测包重试次数 net.ipv4.tcp_keepalive_probes = 9</description></item><item><title>TCP分手优化</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%88%86%E6%89%8B%E4%BC%98%E5%8C%96/</link><pubDate>Sun, 18 Jun 2023 16:17:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%88%86%E6%89%8B%E4%BC%98%E5%8C%96/</guid><description>net.ipv4.tcp_tw_reuse = 1 开启后, 作为客户端时新连接可以使用仍然处于TIME-WAIT状态的端口 由于timestamp的存在, 操作系统可以拒绝迟到的报文, net.ipv4.tcp_timestamps = 1</description></item><item><title>不建议开启tcp fast open功能</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E4%B8%8D%E5%BB%BA%E8%AE%AE%E5%BC%80%E5%90%AFtfo/</link><pubDate>Sat, 17 Jun 2023 16:37:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E4%B8%8D%E5%BB%BA%E8%AE%AE%E5%BC%80%E5%90%AFtfo/</guid><description>原文</description></item><item><title>TCP握手优化</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E6%8F%A1%E6%89%8B%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 17 Jun 2023 14:48:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E6%8F%A1%E6%89%8B%E4%BC%98%E5%8C%96/</guid><description>延长syn, accept队列 应用层connect超时时间 操作系统内核 服务器端syn_rcv状态 net.ipv4.tcp_max_syn_backlog: syn_rcvd状态连接的最大个数 net.ipv4.tcp_synack_retries: 被动建立</description></item><item><title>Berkeley Packet Filters</title><link>https://jdxj.github.io/posts/articles/ibm/berkeley-packet-filters/</link><pubDate>Sat, 17 Jun 2023 12:23:28 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/ibm/berkeley-packet-filters/</guid><description>原文</description></item><item><title>UDP Header</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/udp-header/</link><pubDate>Sat, 17 Jun 2023 11:23:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/udp-header/</guid><description/></item><item><title>IP Header</title><link>https://jdxj.github.io/posts/articles/jdxj/ip/ip-header/</link><pubDate>Sat, 17 Jun 2023 11:10:16 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/ip/ip-header/</guid><description>IPv4 Header IHL 头部长度, word(4byte) TL 总长度, byte Id 分片表示 Flags 分片控制 DF = 1 不能分片 MF = 1 中间分片 FO 分片内偏移, 8byte TTL 路由器跳数生存期 Protocol 承载协议 HC 校验和</description></item><item><title>TCP/IP协议层</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-ip%E5%88%86%E5%B1%82/</link><pubDate>Sat, 17 Jun 2023 10:47:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-ip%E5%88%86%E5%B1%82/</guid><description/></item><item><title>程序员进阶</title><link>https://jdxj.github.io/posts/articles/it-blog-cn/</link><pubDate>Wed, 14 Jun 2023 12:26:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/it-blog-cn/</guid><description>主页</description></item><item><title>使用随机端口</title><link>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</link><pubDate>Wed, 14 Jun 2023 12:07:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/learnku/%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</guid><description>原文 listen的地址填:0</description></item><item><title>缓存更新的套路</title><link>https://jdxj.github.io/posts/articles/coolshell/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%9A%84%E5%A5%97%E8%B7%AF/</link><pubDate>Tue, 13 Jun 2023 13:07:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/coolshell/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%9A%84%E5%A5%97%E8%B7%AF/</guid><description>原文 更新缓存的的Design Pattern有四种： Cache aside Read through Write through Write behind caching</description></item><item><title>熔断</title><link>https://jdxj.github.io/posts/articles/oschina/%E7%86%94%E6%96%AD/</link><pubDate>Tue, 06 Jun 2023 22:33:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/oschina/%E7%86%94%E6%96%AD/</guid><description>原文</description></item><item><title>Redis中常见的四种统计模式</title><link>https://jdxj.github.io/posts/articles/jdxj/redis/redis%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%9F%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 04 Jun 2023 23:23:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/redis/redis%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%9F%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>聚合统计 集合的交, 差, 并集 SUNIONSTORE SDIFFSTORE SINTERSTORE 这些命令复杂度较高 排序统计 可以使用sorted set保证分页时, 元素不会串 ZRANGEBYSCORE 二值状态统计 bitmap SETBIT BITOP BITCOUNT 基数统计 指统</description></item><item><title>过多的使用String键会造成内存浪费</title><link>https://jdxj.github.io/posts/articles/jdxj/redis/%E9%81%BF%E5%85%8D%E8%BF%87%E5%A4%9A%E4%BD%BF%E7%94%A8string/</link><pubDate>Sun, 04 Jun 2023 19:45:35 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/redis/%E9%81%BF%E5%85%8D%E8%BF%87%E5%A4%9A%E4%BD%BF%E7%94%A8string/</guid><description>占用内存的元数据过多 全局hash表一个项是dictEntry 封装底层编码的RedisObject 如果想节约内存, 可以考虑使用底层编码为zip</description></item><item><title>Go 1.18 泛型全面讲解：一篇讲清泛型的全部</title><link>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</link><pubDate>Sun, 04 Jun 2023 15:54:05 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/segmentfault/go-generics/</guid><description>原文</description></item><item><title>软链接 硬链接</title><link>https://jdxj.github.io/posts/articles/jdxj/linux/%E8%BD%AF%E9%93%BE%E6%8E%A5-%E7%A1%AC%E9%93%BE%E6%8E%A5/</link><pubDate>Mon, 24 Apr 2023 13:31:34 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/linux/%E8%BD%AF%E9%93%BE%E6%8E%A5-%E7%A1%AC%E9%93%BE%E6%8E%A5/</guid><description>Linux系统中的文件链接分为软链接和硬链接两种。 软链接创建后，如果源文件被删除，则软链接将无法继续使用，可以跨分区和磁盘创建软链接。 硬链接</description></item><item><title>Redis内部编码</title><link>https://jdxj.github.io/posts/articles/jdxj/redis%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81/</link><pubDate>Fri, 21 Apr 2023 16:30:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/redis%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81/</guid><description>查看某key的内部编码 1 2 3 4 redis&amp;gt; RPUSH lst 1 3 5 10086 &amp;#34;hello&amp;#34; &amp;#34;world&amp;#34; (integer)6 redis&amp;gt; OBJECT ENCODING lst &amp;#34;ziplist&amp;#34; raw embstr hashtable linkedlist ziplist intset skiplist</description></item><item><title>Introducing the Go Race Detector</title><link>https://jdxj.github.io/posts/articles/go/go-race-detector/</link><pubDate>Wed, 19 Apr 2023 16:08:33 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/go/go-race-detector/</guid><description>原文</description></item><item><title>HTTP 代理原理及实现（一）</title><link>https://jdxj.github.io/posts/articles/imququ/http%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</link><pubDate>Mon, 17 Apr 2023 17:44:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/imququ/http%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</guid><description>原文 普通代理 代理服务器解析客户端req, 之后代理服务器向目标服务器发送该req 隧道代理 代理服务器监听CONNECT方法, 之后转发客户端发来的</description></item><item><title>Go语言高性能编程手册</title><link>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</link><pubDate>Mon, 17 Apr 2023 14:54:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/go%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</guid><description>原文 少使用反射 优先使用 strconv 而不是 fmt 少量的重复不比反射差 慎用 binary.Read 和 binary.Write 避免重复的字符串到字节切片的转换 指定容器容量 行内拼接字符串推荐使用运算符+ 非行</description></item><item><title>SSH 安全加固的一些措施</title><link>https://jdxj.github.io/posts/articles/zzz/ssh%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</link><pubDate>Mon, 17 Apr 2023 14:39:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/zzz/ssh%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</guid><description>原文 可用的简单配置 # 禁用旧版本的有漏洞的 SSH 协议 # (旧版本的 sshd 默认允许新旧版本(2,1)的协议，新版本的 sshd 默认只接受新版本(2)的协议） Protocol 2 #</description></item><item><title>安装K8s</title><link>https://jdxj.github.io/posts/articles/jdxj/k8s/</link><pubDate>Mon, 17 Apr 2023 13:38:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/k8s/</guid><description>安装Docker Install Docker Engine on Debian 配置containerd 1 2 3 4 $ containerd config default | tee /etc/containerd/config.toml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 $ vim /etc/containerd/config.toml SystemdCgroup = true $ systemctl restart containerd 安装K8s 关闭交换 1 2 $ swapoff -a $ vim /etc/fstab 官方安装教</description></item><item><title>延迟确认</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/</link><pubDate>Tue, 11 Apr 2023 20:34:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/</guid><description>延迟确认在很多 linux 机器上是没有办法关闭的 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 static void __tcp_ack_snd_check(struct sock *sk, int ofo_possible) { struct tcp_sock *tp = tcp_sk(sk); /* More than one full frame received... */ if (((tp-&amp;gt;rcv_nxt - tp-&amp;gt;rcv_wup) &amp;gt; tp-&amp;gt;ack.rcv_mss /* ...</description></item><item><title>Nagle</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/nagle/</link><pubDate>Tue, 11 Apr 2023 20:07:52 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/nagle/</guid><description>减少发送端频繁的发送小包给对方。 算法思路 if there is new data to send if the window size &amp;gt;= MSS and available data is &amp;gt;= MSS send complete MSS segment now else if there is unconfirmed data still in the pipe enqueue data in the buffer until an acknowledge is received else send data immediately end if</description></item><item><title>拥塞控制</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 10 Apr 2023 21:01:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</guid><description>todo: 找一个完整的拥塞控制图</description></item><item><title>滑动窗口</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link><pubDate>Sun, 09 Apr 2023 11:43:02 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid><description>TCP 包状态分类 粉色部分#1 (Bytes Sent and Acknowledged)：表示已发送且已收到 ACK 确认的数据包。 蓝色部分#2 (Bytes Sent but Not Yet Acknowledged)</description></item><item><title>超时重传</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0/</link><pubDate>Sun, 09 Apr 2023 11:08:12 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0/</guid><description>Retransmission TimeOut，RTO 计算RTO 经典方法 适用 RTT 波动较小的情况 取平均值 Smoothed round trip time，SRTT α 是平滑因子，建议值是0.8 ~ 0.9 SRTT = ( α * SRTT )</description></item><item><title>快速重传与SACK</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0/</link><pubDate>Sun, 09 Apr 2023 10:51:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0/</guid><description>当发送端收到 3 个或以上重复 ACK，就意识到之前发的包可能丢了，于是马上进行重传，不用傻傻的等到超时再重传。</description></item><item><title>Socket Options</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/socket-options/</link><pubDate>Sun, 09 Apr 2023 10:05:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/socket-options/</guid><description>SO_LINGER SO_LINGER 参数是一个 linger 结构体 1 2 3 4 struct linger { int l_onoff; /* linger active */ int l_linger; /* how many seconds to linger for */ }; l_onoff 用来表示是否启用 linger 特性，非 0 为启用，0 为禁用 ，linux 内核默认为禁</description></item><item><title>发生RST的情景</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%B8%B8%E8%A7%81rst/</link><pubDate>Sun, 09 Apr 2023 09:58:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E5%B8%B8%E8%A7%81rst/</guid><description>端口未监听 断电丢失连接 设置SO_LINGER为true 如果设置 SO_LINGER 为 true，linger 设置为 0，当调用 socket.close() 时， close 函数会立即返回，同时丢弃缓冲</description></item><item><title>MSL</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/msl/</link><pubDate>Sat, 08 Apr 2023 11:06:58 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/msl/</guid><description>Max Segment Lifetime MSL（报文最大生存时间）是 TCP 报文在网络中的最大生存时间。这个值与 IP 报文头的 TTL 字段有密切的关系。 TTL: IP 报文最大可经过的路由数 Linux 的套接字实</description></item><item><title>Linux内核参数优化及原理</title><link>https://jdxj.github.io/posts/articles/code2life/tcp%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 08 Apr 2023 10:06:49 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/code2life/tcp%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</guid><description>原文 修改内核参数的方法 编辑/etc/sysctl.conf添加配置 执行sysctl -p立即生效</description></item><item><title>一些关于BBR的文章</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/bbr%E5%88%86%E6%9E%90/</link><pubDate>Sat, 08 Apr 2023 09:56:37 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/bbr%E5%88%86%E6%9E%90/</guid><description>TCP拥塞控制及BBR原理分析 BBR TCP</description></item><item><title>Debian11开启BBR</title><link>https://jdxj.github.io/posts/articles/ahlxjg/bbr/</link><pubDate>Sat, 08 Apr 2023 09:11:45 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/ahlxjg/bbr/</guid><description>Debian11应该默认开启了, 验证 lsmod | grep bbr #或成功则会出现类似的内容 tcp_bbr 20480 1 参考 Debian11开启bbr</description></item><item><title>TCP Fast Open</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tfo/</link><pubDate>Wed, 05 Apr 2023 11:27:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tfo/</guid><description>TFO</description></item><item><title>SYN Cookie</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-cookie/</link><pubDate>Wed, 05 Apr 2023 11:12:14 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-cookie/</guid><description>用来解决 SYN Flood 攻击的，现在服务器上的 tcp_syncookies 都是默认等于 1，表示连接队列满时启用，等于 0 表示禁用，等于 2 表示始终启用。由 /proc/sys/net/</description></item><item><title>SYN Flood 攻击</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-flood/</link><pubDate>Wed, 05 Apr 2023 11:06:54 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/syn-flood/</guid><description>客户端大量伪造 IP 发送 SYN 包，服务端回复的 ACK+SYN 去到了一个「未知」的 IP 地址，势必会造成服务端大量的连接处于 SYN_RCVD 状态，而服务器的 半连接队列大小也是有限的</description></item><item><title>连接队列</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</link><pubDate>Wed, 05 Apr 2023 10:21:38 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/</guid><description>半连接队列（Incomplete connection queue），又称 SYN 队列 全连接队列（Completed connection queue），又称 Accept 队列 半连接队列（SYN Queu</description></item><item><title>如何在工作中学习</title><link>https://jdxj.github.io/posts/articles/plantegg/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 02 Apr 2023 18:53:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/plantegg/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/</guid><description>原文 学习要结合实践</description></item><item><title>连接状态转换</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</link><pubDate>Sun, 02 Apr 2023 17:44:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</guid><description>完整的状态转换 三次握手的状态变化 同时打开的状态变化 自连接的状态变化 其实就是同时打开, 步骤5, 6在原文当中是window update包, 所以s</description></item><item><title>MSS</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</link><pubDate>Sun, 02 Apr 2023 12:09:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</guid><description>MSS TCP 为了避免被发送方分片，会主动把数据分割成小段再交给网络层，最大的分段大小称之为 MSS（Max Segment Size）。 MSS = MTU - IP header头大小 -</description></item><item><title>MTU</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</link><pubDate>Sun, 02 Apr 2023 11:38:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</guid><description>MTU 数据链路层传输的帧大小是有限制的，不能把一个太大的包直接塞给链路层，这个限制被称为「最大传输单元（Maximum Transmission Unit, MTU）」 MTU是指整</description></item><item><title>TCP Options</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</link><pubDate>Sat, 01 Apr 2023 21:16:50 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</guid><description>可选项格式 时间戳选项 TCP Timestamps Option，TSopt 由4部分组成 类别（kind） 长度（Length） 发送方时间戳（TS value） 回显时间戳（T</description></item><item><title>TCP窗口大小</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</link><pubDate>Sat, 01 Apr 2023 21:10:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</guid><description>window size只有16位, 起初表示最大窗口为65535B 后来不够用就引入了TCP窗口缩放选项, 范围为0~14 0: 不缩放 !=0: 窗口大小为 windowSize * 2^n 窗口缩放在</description></item><item><title>TCP Flags</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</link><pubDate>Sat, 01 Apr 2023 21:07:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</guid><description>这些标记可以组合使用，比如 SYN+ACK，FIN+ACK 等 SYN（Synchronize）：用于发起连接数据包同步双方的初始序列号 ACK（A</description></item><item><title>TCP序列号/确认号</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</link><pubDate>Sat, 01 Apr 2023 18:23:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</guid><description>序列号 Sequence Number 序列号指的是本报文段第一个字节的序列号 32位无符号整数 初始序列号 在建立连接之初，通信双方都会各自选择一个序列号，称之为初始序列号。</description></item><item><title>TCP Header</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-header/</link><pubDate>Sat, 01 Apr 2023 18:21:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-header/</guid><description>TCP Options
-------------------------------- |type(1byte)|len(1byte)|content(len-2)| --------------------------------</description></item><item><title>TCP的特点</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</link><pubDate>Sat, 01 Apr 2023 17:39:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</guid><description>面向连接 可靠 校验和 序列号解决乱序, 重复 超时重传 流量控制, 拥塞控制 基于字节流 全双工</description></item><item><title>Go工程化 - 手摸手带你理解依赖注入</title><link>https://jdxj.github.io/posts/articles/weixin/di/</link><pubDate>Tue, 14 Mar 2023 16:01:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/di/</guid><description>原文</description></item><item><title>一文搞定Containerd的使用</title><link>https://jdxj.github.io/posts/articles/weixin/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9Acontainerd%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 14 Mar 2023 15:29:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9Acontainerd%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>了解啥是libcontainer、runc、containerd、CRI、OCI 原文</description></item><item><title>链路追踪（Tracing）的前世今生（上）</title><link>https://jdxj.github.io/posts/articles/weixin/tracing/</link><pubDate>Fri, 10 Mar 2023 14:41:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/tracing/</guid><description>原文</description></item><item><title>高可用Redis服务架构分析与搭建</title><link>https://jdxj.github.io/posts/articles/xuning/redis/</link><pubDate>Fri, 10 Mar 2023 14:19:36 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/xuning/redis/</guid><description>原文</description></item><item><title>如何获取客户端真实 IP？从 Gin 的一个 "Bug" 说起</title><link>https://jdxj.github.io/posts/articles/weixin/ip/</link><pubDate>Fri, 10 Mar 2023 13:56:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/ip/</guid><description>边缘节点应该用以下方法来设置 proxy_set_header X-Forwarded-For $remote_addr; 原文</description></item><item><title>Visual Representation of SQL Joins</title><link>https://jdxj.github.io/posts/articles/moffatt/sql-joins/</link><pubDate>Sun, 26 Feb 2023 11:54:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/moffatt/sql-joins/</guid><description>原文</description></item><item><title>A Visual Explanation of SQL Joins</title><link>https://jdxj.github.io/posts/articles/codinghorror/sql-joins/</link><pubDate>Sun, 26 Feb 2023 11:47:22 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/codinghorror/sql-joins/</guid><description>原文</description></item><item><title>Smantic</title><link>https://jdxj.github.io/posts/articles/smantic/</link><pubDate>Thu, 23 Feb 2023 10:06:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/smantic/</guid><description>主页</description></item><item><title>The Best Golang Blogs</title><link>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</link><pubDate>Tue, 21 Feb 2023 14:47:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</guid><description>原文</description></item><item><title>Plan9 Assembly</title><link>https://jdxj.github.io/posts/articles/cch123/plan9/</link><pubDate>Tue, 21 Feb 2023 14:36:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cch123/plan9/</guid><description>原文</description></item><item><title>Intellij Ideavim Repeat Key</title><link>https://jdxj.github.io/posts/articles/fillmem/intellij-ideavim-repeat-key/</link><pubDate>Tue, 21 Feb 2023 14:12:49 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/fillmem/intellij-ideavim-repeat-key/</guid><description>ideavim中没法长按按键重复字符解决办法</description></item><item><title>Golang Developer Roadmap</title><link>https://jdxj.github.io/posts/articles/alikhll/golang-developer-roadmap/</link><pubDate>Tue, 21 Feb 2023 13:51:24 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/alikhll/golang-developer-roadmap/</guid><description>原文</description></item><item><title>MySQL的COUNT是怎么执行的</title><link>https://jdxj.github.io/posts/articles/weixin/mysql%E7%9A%84count%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%A7%E8%A1%8C%E7%9A%84/</link><pubDate>Mon, 20 Feb 2023 17:28:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/mysql%E7%9A%84count%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%A7%E8%A1%8C%E7%9A%84/</guid><description>COUNT函数用于统计在符合搜索条件的记录中，指定的表达式expr不为NULL的行数有多少。 对于COUNT(*)、COUNT(常数)、COU</description></item><item><title>Socket是并发安全的吗</title><link>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</link><pubDate>Fri, 17 Feb 2023 14:51:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</guid><description>多线程并发读/写同一个TCP socket是线程安全的，因为TCP socket的读/写操作都上锁了。虽然线程安全，但依然不建议你这么做，因为T</description></item><item><title>RabbitMQ与Kafka选型对比</title><link>https://jdxj.github.io/posts/articles/skychen1218/rabbitmq%E4%B8%8Ekafka%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/</link><pubDate>Thu, 16 Feb 2023 16:52:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/skychen1218/rabbitmq%E4%B8%8Ekafka%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/</guid><description>主要看下模型对比. 原文</description></item><item><title>缓存与数据库一致性问题深度剖析</title><link>https://jdxj.github.io/posts/articles/rude3knife/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</link><pubDate>Thu, 16 Feb 2023 16:32:16 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/rude3knife/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</guid><description>原文</description></item><item><title>老板要我开发一个简单的工作流引擎</title><link>https://jdxj.github.io/posts/articles/duck-and-duck/%E8%80%81%E6%9D%BF%E8%A6%81%E6%88%91%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</link><pubDate>Thu, 16 Feb 2023 15:47:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/duck-and-duck/%E8%80%81%E6%9D%BF%E8%A6%81%E6%88%91%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</guid><description>原文</description></item><item><title>DDD兴起的原因以及与微服务的关系</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</link><pubDate>Thu, 16 Feb 2023 14:59:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</guid><description>DDD 是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。 原文</description></item><item><title>超全面 MySQL语句加锁分析</title><link>https://jdxj.github.io/posts/articles/zhangdetalk/%E8%B6%85%E5%85%A8%E9%9D%A2-mysql%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</link><pubDate>Tue, 07 Feb 2023 16:03:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/zhangdetalk/%E8%B6%85%E5%85%A8%E9%9D%A2-mysql%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</guid><description>原文</description></item><item><title>惊! 史上最全的select加锁分析(Mysql)</title><link>https://jdxj.github.io/posts/articles/rjzheng/%E6%83%8A-%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84select%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90-mysql/</link><pubDate>Mon, 06 Feb 2023 16:49:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/rjzheng/%E6%83%8A-%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84select%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90-mysql/</guid><description>该文章展示了事务隔离级别与锁的关系, 推荐阅读</description></item><item><title>Dave Cheney</title><link>https://jdxj.github.io/posts/articles/cheney/</link><pubDate>Wed, 28 Dec 2022 10:56:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cheney/</guid><description>主页</description></item><item><title>How to Ask Questions The Smart Way</title><link>https://jdxj.github.io/posts/articles/ryanhanwu/how-to-ask-questions/</link><pubDate>Sat, 24 Dec 2022 12:42:21 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/ryanhanwu/how-to-ask-questions/</guid><description>原文 在提问之前 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到</description></item><item><title>Go1.18快讯 新的IP包</title><link>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</link><pubDate>Fri, 23 Dec 2022 18:03:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</guid><description>原文</description></item><item><title>聊一个 string 和 []byte 转换问题</title><link>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 20 Dec 2022 14:18:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</guid><description>错误的使用uintptr转换结果可能被 GC. 原文</description></item><item><title>Designing Go Libraries</title><link>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</link><pubDate>Tue, 20 Dec 2022 10:17:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</guid><description>原文 1. Primary Concerns 1.1. Usability 建立惯例使库的特性可发现 潜在的错误使用 易于完成常见任务 Case Study: net/http 看起来有些繁琐 1 2 3 4 5 6 7 8 9 10 // import &amp;#34;net/http&amp;#34; req, err := http.NewRequest(http.MethodGet, &amp;#34;http://example.com&amp;#34;, nil /* body */) if err != nil</description></item></channel></rss>