<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Articles on jdxj</title><link>https://jdxj.github.io/posts/articles/</link><description>Recent content in Articles on jdxj</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 20 Dec 2022 11:10:11 +0800</lastBuildDate><atom:link href="https://jdxj.github.io/posts/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在工作中学习</title><link>https://jdxj.github.io/posts/articles/plantegg/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 02 Apr 2023 18:53:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/plantegg/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/</guid><description>原文 学习要结合实践</description></item><item><title>连接状态转换</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</link><pubDate>Sun, 02 Apr 2023 17:44:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</guid><description>三次握手的状态变化 同时打开的状态变化 自连接的状态变化 其实就是同时打开, 步骤5, 6在原文当中是window update包, 所以seq=1了. 四</description></item><item><title>MSS</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</link><pubDate>Sun, 02 Apr 2023 12:09:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mss/</guid><description>MSS TCP 为了避免被发送方分片，会主动把数据分割成小段再交给网络层，最大的分段大小称之为 MSS（Max Segment Size）。 MSS = MTU - IP header头大小 -</description></item><item><title>MTU</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</link><pubDate>Sun, 02 Apr 2023 11:38:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/mtu/</guid><description>MTU 数据链路层传输的帧大小是有限制的，不能把一个太大的包直接塞给链路层，这个限制被称为「最大传输单元（Maximum Transmission Unit, MTU）」 MTU是指整</description></item><item><title>TCP Options</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</link><pubDate>Sat, 01 Apr 2023 21:16:50 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-options/</guid><description>可选项格式</description></item><item><title>TCP窗口大小</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</link><pubDate>Sat, 01 Apr 2023 21:10:57 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-window-size/</guid><description>window size只有16位, 起初表示最大窗口为65535B 后来不够用就引入了TCP窗口缩放选项, 范围为0~14 0: 不缩放 !=0: 窗口大小为 windowSize * 2^n 窗口缩放在</description></item><item><title>TCP Flags</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</link><pubDate>Sat, 01 Apr 2023 21:07:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp-flags/</guid><description>这些标记可以组合使用，比如 SYN+ACK，FIN+ACK 等 SYN（Synchronize）：用于发起连接数据包同步双方的初始序列号 ACK（A</description></item><item><title>TCP序列号/确认号</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</link><pubDate>Sat, 01 Apr 2023 18:23:15 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/tcp%E5%BA%8F%E5%88%97%E5%8F%B7/</guid><description>序列号 Sequence Number 序列号指的是本报文段第一个字节的序列号 32位无符号整数 初始序列号 在建立连接之初，通信双方都会各自选择一个序列号，称之为初始序列号。</description></item><item><title>TCP头部格式</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%A4%B4%E9%83%A8%E6%A0%BC%E5%BC%8F/</link><pubDate>Sat, 01 Apr 2023 18:21:56 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E5%A4%B4%E9%83%A8%E6%A0%BC%E5%BC%8F/</guid><description>不变部分为20B</description></item><item><title>TCP的特点</title><link>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</link><pubDate>Sat, 01 Apr 2023 17:39:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/jdxj/tcp/tcp%E7%89%B9%E7%82%B9/</guid><description>面向连接 可靠 校验和 序列号解决乱序, 重复 超时重传 流量控制, 拥塞控制 基于字节流 全双工</description></item><item><title>Go工程化 - 手摸手带你理解依赖注入</title><link>https://jdxj.github.io/posts/articles/weixin/di/</link><pubDate>Tue, 14 Mar 2023 16:01:17 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/di/</guid><description>原文</description></item><item><title>一文搞定Containerd的使用</title><link>https://jdxj.github.io/posts/articles/weixin/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9Acontainerd%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 14 Mar 2023 15:29:06 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9Acontainerd%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>了解啥是libcontainer、runc、containerd、CRI、OCI 原文</description></item><item><title>链路追踪（Tracing）的前世今生（上）</title><link>https://jdxj.github.io/posts/articles/weixin/tracing/</link><pubDate>Fri, 10 Mar 2023 14:41:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/tracing/</guid><description>原文</description></item><item><title>高可用Redis服务架构分析与搭建</title><link>https://jdxj.github.io/posts/articles/xuning/redis/</link><pubDate>Fri, 10 Mar 2023 14:19:36 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/xuning/redis/</guid><description>最终方案 原文</description></item><item><title>如何获取客户端真实 IP？从 Gin 的一个 "Bug" 说起</title><link>https://jdxj.github.io/posts/articles/weixin/ip/</link><pubDate>Fri, 10 Mar 2023 13:56:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/ip/</guid><description>边缘节点应该用以下方法来设置 proxy_set_header X-Forwarded-For $remote_addr; 原文</description></item><item><title>Visual Representation of SQL Joins</title><link>https://jdxj.github.io/posts/articles/moffatt/sql-joins/</link><pubDate>Sun, 26 Feb 2023 11:54:11 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/moffatt/sql-joins/</guid><description>原文</description></item><item><title>A Visual Explanation of SQL Joins</title><link>https://jdxj.github.io/posts/articles/codinghorror/sql-joins/</link><pubDate>Sun, 26 Feb 2023 11:47:22 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/codinghorror/sql-joins/</guid><description>原文</description></item><item><title>Smantic</title><link>https://jdxj.github.io/posts/articles/smantic/</link><pubDate>Thu, 23 Feb 2023 10:06:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/smantic/</guid><description>主页</description></item><item><title>The Best Golang Blogs</title><link>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</link><pubDate>Tue, 21 Feb 2023 14:47:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/karllhughes/the-best-golang-blogs/</guid><description>原文</description></item><item><title>Plan9 Assembly</title><link>https://jdxj.github.io/posts/articles/cch123/plan9/</link><pubDate>Tue, 21 Feb 2023 14:36:40 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cch123/plan9/</guid><description>原文</description></item><item><title>Intellij Ideavim Repeat Key</title><link>https://jdxj.github.io/posts/articles/fillmem/intellij-ideavim-repeat-key/</link><pubDate>Tue, 21 Feb 2023 14:12:49 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/fillmem/intellij-ideavim-repeat-key/</guid><description>ideavim中没法长按按键重复字符解决办法</description></item><item><title>Golang Developer Roadmap</title><link>https://jdxj.github.io/posts/articles/alikhll/golang-developer-roadmap/</link><pubDate>Tue, 21 Feb 2023 13:51:24 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/alikhll/golang-developer-roadmap/</guid><description>原文</description></item><item><title>MySQL的COUNT是怎么执行的</title><link>https://jdxj.github.io/posts/articles/weixin/mysql%E7%9A%84count%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%A7%E8%A1%8C%E7%9A%84/</link><pubDate>Mon, 20 Feb 2023 17:28:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/mysql%E7%9A%84count%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%A7%E8%A1%8C%E7%9A%84/</guid><description>COUNT函数用于统计在符合搜索条件的记录中，指定的表达式expr不为NULL的行数有多少。 对于COUNT(*)、COUNT(常数)、COU</description></item><item><title>Socket是并发安全的吗</title><link>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</link><pubDate>Fri, 17 Feb 2023 14:51:20 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/weixin/socket%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97/</guid><description>多线程并发读/写同一个TCP socket是线程安全的，因为TCP socket的读/写操作都上锁了。虽然线程安全，但依然不建议你这么做，因为T</description></item><item><title>RabbitMQ与Kafka选型对比</title><link>https://jdxj.github.io/posts/articles/skychen1218/rabbitmq%E4%B8%8Ekafka%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/</link><pubDate>Thu, 16 Feb 2023 16:52:53 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/skychen1218/rabbitmq%E4%B8%8Ekafka%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/</guid><description>主要看下模型对比. 原文</description></item><item><title>缓存与数据库一致性问题深度剖析</title><link>https://jdxj.github.io/posts/articles/rude3knife/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</link><pubDate>Thu, 16 Feb 2023 16:32:16 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/rude3knife/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</guid><description>原文</description></item><item><title>老板要我开发一个简单的工作流引擎</title><link>https://jdxj.github.io/posts/articles/duck-and-duck/%E8%80%81%E6%9D%BF%E8%A6%81%E6%88%91%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</link><pubDate>Thu, 16 Feb 2023 15:47:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/duck-and-duck/%E8%80%81%E6%9D%BF%E8%A6%81%E6%88%91%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</guid><description>原文</description></item><item><title>DDD兴起的原因以及与微服务的关系</title><link>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</link><pubDate>Thu, 16 Feb 2023 14:59:43 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/courage129/ddd%E5%85%B4%E8%B5%B7%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E7%B3%BB/</guid><description>DDD 是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。 原文</description></item><item><title>超全面 MySQL语句加锁分析</title><link>https://jdxj.github.io/posts/articles/zhangdetalk/%E8%B6%85%E5%85%A8%E9%9D%A2-mysql%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</link><pubDate>Tue, 07 Feb 2023 16:03:48 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/zhangdetalk/%E8%B6%85%E5%85%A8%E9%9D%A2-mysql%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</guid><description>原文</description></item><item><title>惊! 史上最全的select加锁分析(Mysql)</title><link>https://jdxj.github.io/posts/articles/rjzheng/%E6%83%8A-%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84select%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90-mysql/</link><pubDate>Mon, 06 Feb 2023 16:49:26 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/rjzheng/%E6%83%8A-%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84select%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90-mysql/</guid><description>该文章展示了事务隔离级别与锁的关系, 推荐阅读 RC/RU+条件列非索引 RC/RU+条件列是聚簇索引 RC/RU+条件列是非聚簇索引 RR/Seri</description></item><item><title>Dave Cheney</title><link>https://jdxj.github.io/posts/articles/cheney/</link><pubDate>Wed, 28 Dec 2022 10:56:47 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/cheney/</guid><description>主页</description></item><item><title>How to Ask Questions The Smart Way</title><link>https://jdxj.github.io/posts/articles/ryanhanwu/how-to-ask-questions/</link><pubDate>Sat, 24 Dec 2022 12:42:21 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/ryanhanwu/how-to-ask-questions/</guid><description>原文 在提问之前 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到</description></item><item><title>Go1.18快讯 新的IP包</title><link>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</link><pubDate>Fri, 23 Dec 2022 18:03:09 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/polarisxu/go1.18%E5%BF%AB%E8%AE%AF-%E6%96%B0%E7%9A%84ip%E5%8C%85/</guid><description>原文</description></item><item><title>聊一个 string 和 []byte 转换问题</title><link>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 20 Dec 2022 14:18:18 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/huoding/%E8%81%8A%E4%B8%80%E4%B8%AAstring%E5%92%8Cbyte%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</guid><description>错误的使用uintptr转换结果可能被 GC. 原文</description></item><item><title>Designing Go Libraries</title><link>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</link><pubDate>Tue, 20 Dec 2022 10:17:23 +0800</pubDate><guid>https://jdxj.github.io/posts/articles/abhinavg/designing-go-libraries/</guid><description>原文 1. Primary Concerns 1.1. Usability 建立惯例使库的特性可发现 潜在的错误使用 易于完成常见任务 Case Study: net/http 看起来有些繁琐 1 2 3 4 5 6 7 8 9 10 // import &amp;#34;net/http&amp;#34; req, err := http.NewRequest(http.MethodGet, &amp;#34;http://example.com&amp;#34;, nil /* body */) if err != nil</description></item></channel></rss>